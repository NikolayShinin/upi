/*! For license information please see fancybox.js.LICENSE.txt */
(self.webpackChunkwebpack=self.webpackChunkwebpack||[]).push([[157],{707:e=>{e.exports=function(e){"use strict";var t=e("html"),i=e(window),n=e(document),o=e.fancybox=function(){o.open.apply(this,arguments)},a=navigator.userAgent.match(/msie/i),r=null,s=void 0!==document.createTouch,l=function(t){return t&&t.hasOwnProperty&&t instanceof e},c=function(t){return t&&"string"===e.type(t)},d=function(e){return c(e)&&e.indexOf("%")>0},p=function(e,t){var i=parseInt(e,10)||0;return t&&d(e)&&(i=o.getViewport()[t]/100*i),Math.ceil(i)},h=function(e,t){return p(e,t)+"px"};e.extend(o,{version:"2.1.5",defaults:{padding:15,margin:20,width:800,height:600,minWidth:100,minHeight:100,maxWidth:9999,maxHeight:9999,pixelRatio:1,autoSize:!0,autoHeight:!1,autoWidth:!1,autoResize:!0,autoCenter:!s,fitToView:!0,aspectRatio:!1,topRatio:.5,leftRatio:.5,scrolling:"auto",wrapCSS:"",arrows:!0,closeBtn:!0,closeClick:!1,nextClick:!1,mouseWheel:!0,autoPlay:!1,playSpeed:3e3,preload:3,modal:!1,loop:!0,ajax:{dataType:"html",headers:{"X-fancyBox":!0}},iframe:{scrolling:"auto",preload:!0},swf:{wmode:"transparent",allowfullscreen:"true",allowscriptaccess:"always"},keys:{next:{13:"left",34:"up",39:"left",40:"up"},prev:{8:"right",33:"down",37:"right",38:"down"},close:[27],play:[32],toggle:[70]},direction:{next:"left",prev:"right"},scrollOutside:!0,index:0,type:null,href:null,content:null,title:null,tpl:{wrap:'<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',image:'<img class="fancybox-image" src="{href}" alt="" />',iframe:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen'+(a?' allowtransparency="true"':"")+"></iframe>",error:'<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',closeBtn:'<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',next:'<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',prev:'<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>',loading:'<div id="fancybox-loading"><div></div></div>'},openEffect:"fade",openSpeed:250,openEasing:"swing",openOpacity:!0,openMethod:"zoomIn",closeEffect:"fade",closeSpeed:250,closeEasing:"swing",closeOpacity:!0,closeMethod:"zoomOut",nextEffect:"elastic",nextSpeed:250,nextEasing:"swing",nextMethod:"changeIn",prevEffect:"elastic",prevSpeed:250,prevEasing:"swing",prevMethod:"changeOut",helpers:{overlay:!0,title:!0},onCancel:e.noop,beforeLoad:e.noop,afterLoad:e.noop,beforeShow:e.noop,afterShow:e.noop,beforeChange:e.noop,beforeClose:e.noop,afterClose:e.noop},group:{},opts:{},previous:null,coming:null,current:null,isActive:!1,isOpen:!1,isOpened:!1,wrap:null,skin:null,outer:null,inner:null,player:{timer:null,isActive:!1},ajaxLoad:null,imgPreload:null,transitions:{},helpers:{},open:function(t,i){if(t&&(e.isPlainObject(i)||(i={}),!1!==o.close(!0)))return e.isArray(t)||(t=l(t)?e(t).get():[t]),e.each(t,(function(n,a){var r,s,d,p,h,f,u,g={};"object"===e.type(a)&&(a.nodeType&&(a=e(a)),l(a)?(g={href:a.data("fancybox-href")||a.attr("href"),title:e("<div/>").text(a.data("fancybox-title")||a.attr("title")||"").html(),isDom:!0,element:a},e.metadata&&e.extend(!0,g,a.metadata())):g=a),r=i.href||g.href||(c(a)?a:null),s=void 0!==i.title?i.title:g.title||"",!(p=(d=i.content||g.content)?"html":i.type||g.type)&&g.isDom&&((p=a.data("fancybox-type"))||(p=(h=a.prop("class").match(/fancybox\.(\w+)/))?h[1]:null)),c(r)&&(p||(o.isImage(r)?p="image":o.isSWF(r)?p="swf":"#"===r.charAt(0)?p="inline":c(a)&&(p="html",d=a)),"ajax"===p&&(f=r.split(/\s+/,2),r=f.shift(),u=f.shift())),d||("inline"===p?r?d=e(c(r)?r.replace(/.*(?=#[^\s]+$)/,""):r):g.isDom&&(d=a):"html"===p?d=r:p||r||!g.isDom||(p="inline",d=a)),e.extend(g,{href:r,type:p,content:d,title:s,selector:u}),t[n]=g})),o.opts=e.extend(!0,{},o.defaults,i),void 0!==i.keys&&(o.opts.keys=!!i.keys&&e.extend({},o.defaults.keys,i.keys)),o.group=t,o._start(o.opts.index)},cancel:function(){var e=o.coming;e&&!1===o.trigger("onCancel")||(o.hideLoading(),e&&(o.ajaxLoad&&o.ajaxLoad.abort(),o.ajaxLoad=null,o.imgPreload&&(o.imgPreload.onload=o.imgPreload.onerror=null),e.wrap&&e.wrap.stop(!0,!0).trigger("onReset").remove(),o.coming=null,o.current||o._afterZoomOut(e)))},close:function(t){o.cancel(),!1!==o.trigger("beforeClose")&&(o.unbindEvents(),o.isActive&&(o.isOpen&&!0!==t?(o.isOpen=o.isOpened=!1,o.isClosing=!0,e(".fancybox-item, .fancybox-nav").remove(),o.wrap.stop(!0,!0).removeClass("fancybox-opened"),o.transitions[o.current.closeMethod]()):(e(".fancybox-wrap").stop(!0).trigger("onReset").remove(),o._afterZoomOut())))},play:function(e){var t=function(){clearTimeout(o.player.timer)},i=function(){t(),o.current&&o.player.isActive&&(o.player.timer=setTimeout(o.next,o.current.playSpeed))},a=function(){t(),n.unbind(".player"),o.player.isActive=!1,o.trigger("onPlayEnd")};!0===e||!o.player.isActive&&!1!==e?o.current&&(o.current.loop||o.current.index<o.group.length-1)&&(o.player.isActive=!0,n.bind({"onCancel.player beforeClose.player":a,"onUpdate.player":i,"beforeLoad.player":t}),i(),o.trigger("onPlayStart")):a()},next:function(e){var t=o.current;t&&(c(e)||(e=t.direction.next),o.jumpto(t.index+1,e,"next"))},prev:function(e){var t=o.current;t&&(c(e)||(e=t.direction.prev),o.jumpto(t.index-1,e,"prev"))},jumpto:function(e,t,i){var n=o.current;n&&(e=p(e),o.direction=t||n.direction[e>=n.index?"next":"prev"],o.router=i||"jumpto",n.loop&&(e<0&&(e=n.group.length+e%n.group.length),e%=n.group.length),void 0!==n.group[e]&&(o.cancel(),o._start(e)))},reposition:function(t,i){var n,a=o.current,r=a?a.wrap:null;r&&(n=o._getPosition(i),t&&"scroll"===t.type?(delete n.position,r.stop(!0,!0).animate(n,200)):(r.css(n),a.pos=e.extend({},a.dim,n)))},update:function(e){var t=e&&e.originalEvent&&e.originalEvent.type,i=!t||"orientationchange"===t;i&&(clearTimeout(r),r=null),o.isOpen&&!r&&(r=setTimeout((function(){var n=o.current;n&&!o.isClosing&&(o.wrap.removeClass("fancybox-tmp"),(i||"load"===t||"resize"===t&&n.autoResize)&&o._setDimension(),"scroll"===t&&n.canShrink||o.reposition(e),o.trigger("onUpdate"),r=null)}),i&&!s?0:300))},toggle:function(t){o.isOpen&&(o.current.fitToView="boolean"===e.type(t)?t:!o.current.fitToView,s&&(o.wrap.removeAttr("style").addClass("fancybox-tmp"),o.trigger("onUpdate")),o.update())},hideLoading:function(){n.unbind(".loading"),e("#fancybox-loading").remove()},showLoading:function(){var t,i;o.hideLoading(),t=e(o.opts.tpl.loading).click(o.cancel).appendTo("body"),n.bind("keydown.loading",(function(e){27===(e.which||e.keyCode)&&(e.preventDefault(),o.cancel())})),o.defaults.fixed||(i=o.getViewport(),t.css({position:"absolute",top:.5*i.h+i.y,left:.5*i.w+i.x})),o.trigger("onLoading")},getViewport:function(){var e=o.current&&o.current.locked||!1,t={x:i.scrollLeft(),y:i.scrollTop()};return e&&e.length?(t.w=e[0].clientWidth,t.h=e[0].clientHeight):(t.w=s&&window.innerWidth?window.innerWidth:i.width(),t.h=s&&window.innerHeight?window.innerHeight:i.height()),t},unbindEvents:function(){o.wrap&&l(o.wrap)&&o.wrap.unbind(".fb"),n.unbind(".fb"),i.unbind(".fb")},bindEvents:function(){var t,a=o.current;a&&(i.bind("orientationchange.fb"+(s?"":" resize.fb")+(a.autoCenter&&!a.locked?" scroll.fb":""),o.update),(t=a.keys)&&n.bind("keydown.fb",(function(i){var n=i.which||i.keyCode,r=i.target||i.srcElement;if(27===n&&o.coming)return!1;i.ctrlKey||i.altKey||i.shiftKey||i.metaKey||r&&(r.type||e(r).is("[contenteditable]"))||e.each(t,(function(t,r){return a.group.length>1&&void 0!==r[n]?(o[t](r[n]),i.preventDefault(),!1):e.inArray(n,r)>-1?(o[t](),i.preventDefault(),!1):void 0}))})),e.fn.mousewheel&&a.mouseWheel&&o.wrap.bind("mousewheel.fb",(function(t,i,n,r){for(var s,l=t.target||null,c=e(l),d=!1;c.length&&!(d||c.is(".fancybox-skin")||c.is(".fancybox-wrap"));)d=(s=c[0])&&!(s.style.overflow&&"hidden"===s.style.overflow)&&(s.clientWidth&&s.scrollWidth>s.clientWidth||s.clientHeight&&s.scrollHeight>s.clientHeight),c=e(c).parent();0===i||d||o.group.length>1&&!a.canShrink&&(r>0||n>0?o.prev(r>0?"down":"left"):(r<0||n<0)&&o.next(r<0?"up":"right"),t.preventDefault())})))},trigger:function(t,i){var a,r=i||o.coming||o.current;if(r){if(e.isFunction(r[t])&&(a=r[t].apply(r,Array.prototype.slice.call(arguments,1))),!1===a)return!1;r.helpers&&e.each(r.helpers,(function(i,n){n&&o.helpers[i]&&e.isFunction(o.helpers[i][t])&&o.helpers[i][t](e.extend(!0,{},o.helpers[i].defaults,n),r)}))}n.trigger(t)},isImage:function(e){return c(e)&&e.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i)},isSWF:function(e){return c(e)&&e.match(/\.(swf)((\?|#).*)?$/i)},_start:function(t){var i,n,a,r,l,c={};if(t=p(t),!(i=o.group[t]||null))return!1;if(r=(c=e.extend(!0,{},o.opts,i)).margin,l=c.padding,"number"===e.type(r)&&(c.margin=[r,r,r,r]),"number"===e.type(l)&&(c.padding=[l,l,l,l]),c.modal&&e.extend(!0,c,{closeBtn:!1,closeClick:!1,nextClick:!1,arrows:!1,mouseWheel:!1,keys:null,helpers:{overlay:{closeClick:!1}}}),c.autoSize&&(c.autoWidth=c.autoHeight=!0),"auto"===c.width&&(c.autoWidth=!0),"auto"===c.height&&(c.autoHeight=!0),c.group=o.group,c.index=t,o.coming=c,!1!==o.trigger("beforeLoad")){if(a=c.type,n=c.href,!a)return o.coming=null,!(!o.current||!o.router||"jumpto"===o.router)&&(o.current.index=t,o[o.router](o.direction));if(o.isActive=!0,"image"!==a&&"swf"!==a||(c.autoHeight=c.autoWidth=!1,c.scrolling="visible"),"image"===a&&(c.aspectRatio=!0),"iframe"===a&&s&&(c.scrolling="scroll"),c.wrap=e(c.tpl.wrap).addClass("fancybox-"+(s?"mobile":"desktop")+" fancybox-type-"+a+" fancybox-tmp "+c.wrapCSS).appendTo(c.parent||"body"),e.extend(c,{skin:e(".fancybox-skin",c.wrap),outer:e(".fancybox-outer",c.wrap),inner:e(".fancybox-inner",c.wrap)}),e.each(["Top","Right","Bottom","Left"],(function(e,t){c.skin.css("padding"+t,h(c.padding[e]))})),o.trigger("onReady"),"inline"===a||"html"===a){if(!c.content||!c.content.length)return o._error("content")}else if(!n)return o._error("href");"image"===a?o._loadImage():"ajax"===a?o._loadAjax():"iframe"===a?o._loadIframe():o._afterLoad()}else o.coming=null},_error:function(t){e.extend(o.coming,{type:"html",autoWidth:!0,autoHeight:!0,minWidth:0,minHeight:0,scrolling:"no",hasError:t,content:o.coming.tpl.error}),o._afterLoad()},_loadImage:function(){var e=o.imgPreload=new Image;e.onload=function(){this.onload=this.onerror=null,o.coming.width=this.width/o.opts.pixelRatio,o.coming.height=this.height/o.opts.pixelRatio,o._afterLoad()},e.onerror=function(){this.onload=this.onerror=null,o._error("image")},e.src=o.coming.href,!0!==e.complete&&o.showLoading()},_loadAjax:function(){var t=o.coming;o.showLoading(),o.ajaxLoad=e.ajax(e.extend({},t.ajax,{url:t.href,error:function(e,t){o.coming&&"abort"!==t?o._error("ajax",e):o.hideLoading()},success:function(e,i){"success"===i&&(t.content=e,o._afterLoad())}}))},_loadIframe:function(){var t=o.coming,i=e(t.tpl.iframe.replace(/\{rnd\}/g,(new Date).getTime())).attr("scrolling",s?"auto":t.iframe.scrolling).attr("src",t.href);e(t.wrap).bind("onReset",(function(){try{e(this).find("iframe").hide().attr("src","//about:blank").end().empty()}catch(e){}})),t.iframe.preload&&(o.showLoading(),i.one("load",(function(){e(this).data("ready",1),s||e(this).bind("load.fb",o.update),e(this).parents(".fancybox-wrap").width("100%").removeClass("fancybox-tmp").show(),o._afterLoad()}))),t.content=i.appendTo(t.inner),t.iframe.preload||o._afterLoad()},_preloadImages:function(){var e,t,i=o.group,n=o.current,a=i.length,r=n.preload?Math.min(n.preload,a-1):0;for(t=1;t<=r;t+=1)"image"===(e=i[(n.index+t)%a]).type&&e.href&&((new Image).src=e.href)},_afterLoad:function(){var t,i,n,a,r,s,c=o.coming,d=o.current,p="fancybox-placeholder";if(o.hideLoading(),c&&!1!==o.isActive){if(!1===o.trigger("afterLoad",c,d))return c.wrap.stop(!0).trigger("onReset").remove(),void(o.coming=null);switch(d&&(o.trigger("beforeChange",d),d.wrap.stop(!0).removeClass("fancybox-opened").find(".fancybox-item, .fancybox-nav").remove()),o.unbindEvents(),t=c,i=c.content,n=c.type,a=c.scrolling,e.extend(o,{wrap:t.wrap,skin:t.skin,outer:t.outer,inner:t.inner,current:t,previous:d}),r=t.href,n){case"inline":case"ajax":case"html":t.selector?i=e("<div>").html(i).find(t.selector):l(i)&&(i.data(p)||i.data(p,e('<div class="'+p+'"></div>').insertAfter(i).hide()),i=i.show().detach(),t.wrap.bind("onReset",(function(){e(this).find(i).length&&i.hide().replaceAll(i.data(p)).data(p,!1)})));break;case"image":i=t.tpl.image.replace(/\{href\}/g,r);break;case"swf":i='<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="'+r+'"></param>',s="",e.each(t.swf,(function(e,t){i+='<param name="'+e+'" value="'+t+'"></param>',s+=" "+e+'="'+t+'"'})),i+='<embed src="'+r+'" type="application/x-shockwave-flash" width="100%" height="100%"'+s+"></embed></object>"}l(i)&&i.parent().is(t.inner)||t.inner.append(i),o.trigger("beforeShow"),t.inner.css("overflow","yes"===a?"scroll":"no"===a?"hidden":a),o._setDimension(),o.reposition(),o.isOpen=!1,o.coming=null,o.bindEvents(),o.isOpened?d.prevMethod&&o.transitions[d.prevMethod]():e(".fancybox-wrap").not(t.wrap).stop(!0).trigger("onReset").remove(),o.transitions[o.isOpened?t.nextMethod:t.openMethod](),o._preloadImages()}},_setDimension:function(){var t,i,n,a,r,s,l,c,f,u,g,m,y,x,w,v,b,k=o.getViewport(),C=0,O=o.wrap,W=o.skin,_=o.inner,S=o.current,T=S.width,E=S.height,L=S.minWidth,H=S.minHeight,P=S.maxWidth,R=S.maxHeight,j=S.scrolling,M=S.scrollOutside?S.scrollbarWidth:0,A=S.margin,I=p(A[1]+A[3]),D=p(A[0]+A[2]);if(O.add(W).add(_).width("auto").height("auto").removeClass("fancybox-tmp"),r=I+(n=p(W.outerWidth(!0)-W.width())),s=D+(a=p(W.outerHeight(!0)-W.height())),l=d(T)?(k.w-r)*p(T)/100:T,c=d(E)?(k.h-s)*p(E)/100:E,"iframe"===S.type){if(v=S.content,S.autoHeight&&1===v.data("ready"))try{v[0].contentWindow.document.location&&(_.width(l).height(9999),b=v.contents().find("body"),M&&b.css("overflow-x","hidden"),c=b.outerHeight(!0))}catch(e){}}else(S.autoWidth||S.autoHeight)&&(_.addClass("fancybox-tmp"),S.autoWidth||_.width(l),S.autoHeight||_.height(c),S.autoWidth&&(l=_.width()),S.autoHeight&&(c=_.height()),_.removeClass("fancybox-tmp"));if(T=p(l),E=p(c),g=l/c,L=p(d(L)?p(L,"w")-r:L),P=p(d(P)?p(P,"w")-r:P),H=p(d(H)?p(H,"h")-s:H),f=P,u=R=p(d(R)?p(R,"h")-s:R),S.fitToView&&(P=Math.min(k.w-r,P),R=Math.min(k.h-s,R)),x=k.w-I,w=k.h-D,S.aspectRatio?(T>P&&(E=p((T=P)/g)),E>R&&(T=p((E=R)*g)),T<L&&(E=p((T=L)/g)),E<H&&(T=p((E=H)*g))):(T=Math.max(L,Math.min(T,P)),S.autoHeight&&"iframe"!==S.type&&(_.width(T),E=_.height()),E=Math.max(H,Math.min(E,R))),S.fitToView)if(_.width(T).height(E),O.width(T+n),m=O.width(),y=O.height(),S.aspectRatio)for(;(m>x||y>w)&&T>L&&E>H&&!(C++>19);)E=Math.max(H,Math.min(R,E-10)),(T=p(E*g))<L&&(E=p((T=L)/g)),T>P&&(E=p((T=P)/g)),_.width(T).height(E),O.width(T+n),m=O.width(),y=O.height();else T=Math.max(L,Math.min(T,T-(m-x))),E=Math.max(H,Math.min(E,E-(y-w)));M&&"auto"===j&&E<c&&T+n+M<x&&(T+=M),_.width(T).height(E),O.width(T+n),m=O.width(),y=O.height(),t=(m>x||y>w)&&T>L&&E>H,i=S.aspectRatio?T<f&&E<u&&T<l&&E<c:(T<f||E<u)&&(T<l||E<c),e.extend(S,{dim:{width:h(m),height:h(y)},origWidth:l,origHeight:c,canShrink:t,canExpand:i,wPadding:n,hPadding:a,wrapSpace:y-W.outerHeight(!0),skinSpace:W.height()-E}),!v&&S.autoHeight&&E>H&&E<R&&!i&&_.height("auto")},_getPosition:function(e){var t=o.current,i=o.getViewport(),n=t.margin,a=o.wrap.width()+n[1]+n[3],r=o.wrap.height()+n[0]+n[2],s={position:"absolute",top:n[0],left:n[3]};return t.autoCenter&&t.fixed&&!e&&r<=i.h&&a<=i.w?s.position="fixed":t.locked||(s.top+=i.y,s.left+=i.x),s.top=h(Math.max(s.top,s.top+(i.h-r)*t.topRatio)),s.left=h(Math.max(s.left,s.left+(i.w-a)*t.leftRatio)),s},_afterZoomIn:function(){var t=o.current;t&&(o.isOpen=o.isOpened=!0,o.wrap.css("overflow","visible").addClass("fancybox-opened").hide().show(0),o.update(),(t.closeClick||t.nextClick&&o.group.length>1)&&o.inner.css("cursor","pointer").bind("click.fb",(function(i){e(i.target).is("a")||e(i.target).parent().is("a")||(i.preventDefault(),o[t.closeClick?"close":"next"]())})),t.closeBtn&&e(t.tpl.closeBtn).appendTo(o.skin).bind("click.fb",(function(e){e.preventDefault(),o.close()})),t.arrows&&o.group.length>1&&((t.loop||t.index>0)&&e(t.tpl.prev).appendTo(o.outer).bind("click.fb",o.prev),(t.loop||t.index<o.group.length-1)&&e(t.tpl.next).appendTo(o.outer).bind("click.fb",o.next)),o.trigger("afterShow"),t.loop||t.index!==t.group.length-1?o.opts.autoPlay&&!o.player.isActive&&(o.opts.autoPlay=!1,o.play(!0)):o.play(!1))},_afterZoomOut:function(t){t=t||o.current,e(".fancybox-wrap").trigger("onReset").remove(),e.extend(o,{group:{},opts:{},router:!1,current:null,isActive:!1,isOpened:!1,isOpen:!1,isClosing:!1,wrap:null,skin:null,outer:null,inner:null}),o.trigger("afterClose",t)}}),o.transitions={getOrigPosition:function(){var e=o.current,t=e.element,i=e.orig,n={},a=50,r=50,s=e.hPadding,c=e.wPadding,d=o.getViewport();return!i&&e.isDom&&t.is(":visible")&&((i=t.find("img:first")).length||(i=t)),l(i)?(n=i.offset(),i.is("img")&&(a=i.outerWidth(),r=i.outerHeight())):(n.top=d.y+(d.h-r)*e.topRatio,n.left=d.x+(d.w-a)*e.leftRatio),("fixed"===o.wrap.css("position")||e.locked)&&(n.top-=d.y,n.left-=d.x),{top:h(n.top-s*e.topRatio),left:h(n.left-c*e.leftRatio),width:h(a+c),height:h(r+s)}},step:function(e,t){var i,n,a=t.prop,r=o.current,s=r.wrapSpace,l=r.skinSpace;"width"!==a&&"height"!==a||(i=t.end===t.start?1:(e-t.start)/(t.end-t.start),o.isClosing&&(i=1-i),n=e-("width"===a?r.wPadding:r.hPadding),o.skin[a](p("width"===a?n:n-s*i)),o.inner[a](p("width"===a?n:n-s*i-l*i)))},zoomIn:function(){var t=o.current,i=t.pos,n=t.openEffect,a="elastic"===n,r=e.extend({opacity:1},i);delete r.position,a?(i=this.getOrigPosition(),t.openOpacity&&(i.opacity=.1)):"fade"===n&&(i.opacity=.1),o.wrap.css(i).animate(r,{duration:"none"===n?0:t.openSpeed,easing:t.openEasing,step:a?this.step:null,complete:o._afterZoomIn})},zoomOut:function(){var e=o.current,t=e.closeEffect,i="elastic"===t,n={opacity:.1};i&&(n=this.getOrigPosition(),e.closeOpacity&&(n.opacity=.1)),o.wrap.animate(n,{duration:"none"===t?0:e.closeSpeed,easing:e.closeEasing,step:i?this.step:null,complete:o._afterZoomOut})},changeIn:function(){var e,t=o.current,i=t.nextEffect,n=t.pos,a={opacity:1},r=o.direction;n.opacity=.1,"elastic"===i&&(e="down"===r||"up"===r?"top":"left","down"===r||"right"===r?(n[e]=h(p(n[e])-200),a[e]="+=200px"):(n[e]=h(p(n[e])+200),a[e]="-=200px")),"none"===i?o._afterZoomIn():o.wrap.css(n).animate(a,{duration:t.nextSpeed,easing:t.nextEasing,complete:o._afterZoomIn})},changeOut:function(){var t=o.previous,i=t.prevEffect,n={opacity:.1},a=o.direction;"elastic"===i&&(n["down"===a||"up"===a?"top":"left"]=("up"===a||"left"===a?"-":"+")+"=200px"),t.wrap.animate(n,{duration:"none"===i?0:t.prevSpeed,easing:t.prevEasing,complete:function(){e(this).trigger("onReset").remove()}})}},o.helpers.overlay={defaults:{closeClick:!0,speedOut:200,showEarly:!0,css:{},locked:!s,fixed:!0},overlay:null,fixed:!1,el:e("html"),create:function(t){var i;t=e.extend({},this.defaults,t),this.overlay&&this.close(),i=o.coming?o.coming.parent:t.parent,this.overlay=e('<div class="fancybox-overlay"></div>').appendTo(i&&i.length?i:"body"),this.fixed=!1,t.fixed&&o.defaults.fixed&&(this.overlay.addClass("fancybox-overlay-fixed"),this.fixed=!0)},open:function(t){var n=this;t=e.extend({},this.defaults,t),this.overlay?this.overlay.unbind(".overlay").width("auto").height("auto"):this.create(t),this.fixed||(i.bind("resize.overlay",e.proxy(this.update,this)),this.update()),t.closeClick&&this.overlay.bind("click.overlay",(function(t){if(e(t.target).hasClass("fancybox-overlay"))return o.isActive?o.close():n.close(),!1})),this.overlay.css(t.css).show()},close:function(){i.unbind("resize.overlay"),this.el.hasClass("fancybox-lock")&&(e(".fancybox-margin").removeClass("fancybox-margin"),this.el.removeClass("fancybox-lock"),i.scrollTop(this.scrollV).scrollLeft(this.scrollH)),e(".fancybox-overlay").remove().hide(),e.extend(this,{overlay:null,fixed:!1})},update:function(){var e,t="100%";this.overlay.width(t).height("100%"),a?(e=Math.max(document.documentElement.offsetWidth,document.body.offsetWidth),n.width()>e&&(t=n.width())):n.width()>i.width()&&(t=n.width()),this.overlay.width(t).height(n.height())},onReady:function(t,i){var n=this.overlay;e(".fancybox-overlay").stop(!0,!0),n||this.create(t),t.locked&&this.fixed&&i.fixed&&(i.locked=this.overlay.append(i.wrap),i.fixed=!1),!0===t.showEarly&&this.beforeShow.apply(this,arguments)},beforeShow:function(t,n){n.locked&&!this.el.hasClass("fancybox-lock")&&(!1!==this.fixPosition&&e("*").filter((function(){return"fixed"===e(this).css("position")&&!e(this).hasClass("fancybox-overlay")&&!e(this).hasClass("fancybox-wrap")})).addClass("fancybox-margin"),this.el.addClass("fancybox-margin"),this.scrollV=i.scrollTop(),this.scrollH=i.scrollLeft(),this.el.addClass("fancybox-lock"),i.scrollTop(this.scrollV).scrollLeft(this.scrollH)),this.open(t)},onUpdate:function(){this.fixed||this.update()},afterClose:function(t){this.overlay&&!o.coming&&this.overlay.fadeOut(t.speedOut,e.proxy(this.close,this))}},o.helpers.title={defaults:{type:"float",position:"bottom"},beforeShow:function(t){var i,n,r=o.current,s=r.title,l=t.type;if(e.isFunction(s)&&(s=s.call(r.element,r)),c(s)&&""!==e.trim(s)){switch(i=e('<div class="fancybox-title fancybox-title-'+l+'-wrap">'+s+"</div>"),l){case"inside":n=o.skin;break;case"outside":n=o.wrap;break;case"over":n=o.inner;break;default:n=o.skin,i.appendTo("body"),a&&i.width(i.width()),i.wrapInner('<span class="child"></span>'),o.current.margin[2]+=Math.abs(p(i.css("margin-bottom")))}i["top"===t.position?"prependTo":"appendTo"](n)}}},e.fn.fancybox=function(t){var i,a=e(this),r=this.selector||"",s=function(n){var s,l,c=e(this).blur(),d=i;n.ctrlKey||n.altKey||n.shiftKey||n.metaKey||c.is(".fancybox-wrap")||(s=t.groupAttr||"data-fancybox-group",(l=c.attr(s))||(s="rel",l=c.get(0)[s]),l&&""!==l&&"nofollow"!==l&&(d=(c=(c=r.length?e(r):a).filter("["+s+'="'+l+'"]')).index(this)),t.index=d,!1!==o.open(c,t)&&n.preventDefault())};return i=(t=t||{}).index||0,r&&!1!==t.live?n.undelegate(r,"click.fb-start").delegate(r+":not('.fancybox-item, .fancybox-nav')","click.fb-start",s):a.unbind("click.fb-start").bind("click.fb-start",s),this.filter("[data-fancybox-start=1]").trigger("click"),this},n.ready((function(){var i,n,a,r;void 0===e.scrollbarWidth&&(e.scrollbarWidth=function(){var t=e('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo("body"),i=t.children(),n=i.innerWidth()-i.height(99).innerWidth();return t.remove(),n}),void 0===e.support.fixedPosition&&(e.support.fixedPosition=(r=20===(a=e('<div style="position:fixed;top:20px;"></div>').appendTo("body"))[0].offsetTop||15===a[0].offsetTop,a.remove(),r)),e.extend(o.defaults,{scrollbarWidth:e.scrollbarWidth(),fixed:e.support.fixedPosition,parent:e("body")}),i=e(window).width(),t.addClass("fancybox-lock-test"),n=e(window).width(),t.removeClass("fancybox-lock-test"),e("<style type='text/css'>.fancybox-margin{margin-right:"+(n-i)+"px;}</style>").appendTo("head")}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MFcsV0FBVzFOLEVBQVUsa0JBQWtCMk4sU0FBUzNOLEVBQVcsd0NBQXlDLGlCQUFrQmtOLEdBSHhIaEIsRUFBS2hLLE9BQU8sa0JBQWtCRSxLQUFLLGlCQUFrQjhLLEdBTXpENVYsS0FBS3FWLE9BQU8sMkJBQTJCMUwsUUFBUSxTQUV4QzNKLE1BSVhOLEVBQUU0VyxPQUFNLFdBQ0osSUFBSUMsRUFBSUMsRUFpQklDLEVBQ0FqSyxPQWhCa0JoTSxJQUExQmxCLEVBQU9vVCxpQkFFUHBULEVBQU9vVCxlQUFpQixXQUNwQixJQUFJcEUsRUFBU2hQLEVBQU8sa0VBQWtFOE0sU0FBUyxRQUMzRnNLLEVBQVFwSSxFQUFPcUksV0FDZjNVLEVBQVEwVSxFQUFNdEosYUFBZXNKLEVBQU16VSxPQUFPLElBQUltTCxhQUlsRCxPQUZBa0IsRUFBT3JFLFNBRUFqSSxTQUlzQnhCLElBQWpDbEIsRUFBT3NYLFFBQVFDLGdCQUNmdlgsRUFBT3NYLFFBQVFDLGVBRVBySyxFQUErQixNQUQvQmlLLEVBQU9uWCxFQUFPLGdEQUFnRDhNLFNBQVMsU0FDekQsR0FBRzBLLFdBQTBDLEtBQXRCTCxFQUFLLEdBQUdLLFVBRWpETCxFQUFLeE0sU0FFRXVDLElBSWZsTixFQUFPcUMsT0FBTy9CLEVBQUVpQyxTQUFVLENBQ3RCNlEsZUFBZ0JwVCxFQUFPb1QsaUJBQ3ZCbEcsTUFBT2xOLEVBQU9zWCxRQUFRQyxjQUN0QnZJLE9BQVFoUCxFQUFPLFVBSW5CaVgsRUFBS2pYLEVBQU9HLFFBQVF1QyxRQUVwQnpDLEVBQUV3TSxTQUFTLHNCQUVYeUssRUFBS2xYLEVBQU9HLFFBQVF1QyxRQUVwQnpDLEVBQUUrSyxZQUFZLHNCQUVkaEwsRUFBTyx5REFBMkRrWCxFQUFLRCxHQUFNLGdCQUFnQm5LLFNBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL2ZhbmN5Ym94L2Rpc3QvanMvanF1ZXJ5LmZhbmN5Ym94LmNqcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGZhbmN5Qm94IC0galF1ZXJ5IFBsdWdpblxuICogdmVyc2lvbjogMi4xLjUgKEZyaSwgMTQgSnVuIDIwMTMpXG4gKiByZXF1aXJlcyBqUXVlcnkgdjEuNiBvciBsYXRlclxuICpcbiAqIEV4YW1wbGVzIGF0IGh0dHA6Ly9mYW5jeWFwcHMuY29tL2ZhbmN5Ym94L1xuICogTGljZW5zZTogd3d3LmZhbmN5YXBwcy5jb20vZmFuY3lib3gvI2xpY2Vuc2VcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMiBKYW5pcyBTa2FybmVsaXMgLSBqYW5pc0BmYW5jeWFwcHMuY29tXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oalF1ZXJ5KSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICB2YXIgSCA9IGpRdWVyeShcImh0bWxcIiksXG4gICAgICAgIFcgPSBqUXVlcnkod2luZG93KSxcbiAgICAgICAgRCA9IGpRdWVyeShkb2N1bWVudCksXG4gICAgICAgIEYgPSBqUXVlcnkuZmFuY3lib3ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIEYub3Blbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBJRSA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL21zaWUvaSksXG4gICAgICAgIGRpZFVwZGF0ZSA9IG51bGwsXG4gICAgICAgIGlzVG91Y2ggPSBkb2N1bWVudC5jcmVhdGVUb3VjaCAhPT0gdW5kZWZpbmVkLFxuXG4gICAgICAgIGlzUXVlcnkgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmogJiYgb2JqLmhhc093blByb3BlcnR5ICYmIG9iaiBpbnN0YW5jZW9mIGpRdWVyeTtcbiAgICAgICAgfSxcbiAgICAgICAgaXNTdHJpbmcgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIgJiYgalF1ZXJ5LnR5cGUoc3RyKSA9PT0gXCJzdHJpbmdcIjtcbiAgICAgICAgfSxcbiAgICAgICAgaXNQZXJjZW50YWdlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNTdHJpbmcoc3RyKSAmJiBzdHIuaW5kZXhPZignJScpID4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgaXNTY3JvbGxhYmxlID0gZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIHJldHVybiAoZWwgJiYgIShlbC5zdHlsZS5vdmVyZmxvdyAmJiBlbC5zdHlsZS5vdmVyZmxvdyA9PT0gJ2hpZGRlbicpICYmICgoZWwuY2xpZW50V2lkdGggJiYgZWwuc2Nyb2xsV2lkdGggPiBlbC5jbGllbnRXaWR0aCkgfHwgKGVsLmNsaWVudEhlaWdodCAmJiBlbC5zY3JvbGxIZWlnaHQgPiBlbC5jbGllbnRIZWlnaHQpKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFNjYWxhciA9IGZ1bmN0aW9uKG9yaWcsIGRpbSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VJbnQob3JpZywgMTApIHx8IDA7XG5cbiAgICAgICAgICAgIGlmIChkaW0gJiYgaXNQZXJjZW50YWdlKG9yaWcpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBGLmdldFZpZXdwb3J0KClbZGltXSAvIDEwMCAqIHZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSwgZGltKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0U2NhbGFyKHZhbHVlLCBkaW0pICsgJ3B4JztcbiAgICAgICAgfTtcblxuICAgIGpRdWVyeS5leHRlbmQoRiwge1xuICAgICAgICAvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGZhbmN5Qm94XG4gICAgICAgIHZlcnNpb246ICcyLjEuNScsXG5cbiAgICAgICAgZGVmYXVsdHM6IHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDE1LFxuICAgICAgICAgICAgbWFyZ2luOiAyMCxcblxuICAgICAgICAgICAgd2lkdGg6IDgwMCxcbiAgICAgICAgICAgIGhlaWdodDogNjAwLFxuICAgICAgICAgICAgbWluV2lkdGg6IDEwMCxcbiAgICAgICAgICAgIG1pbkhlaWdodDogMTAwLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDk5OTksXG4gICAgICAgICAgICBtYXhIZWlnaHQ6IDk5OTksXG4gICAgICAgICAgICBwaXhlbFJhdGlvOiAxLCAvLyBTZXQgdG8gMiBmb3IgcmV0aW5hIGRpc3BsYXkgc3VwcG9ydFxuXG4gICAgICAgICAgICBhdXRvU2l6ZTogdHJ1ZSxcbiAgICAgICAgICAgIGF1dG9IZWlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgYXV0b1dpZHRoOiBmYWxzZSxcblxuICAgICAgICAgICAgYXV0b1Jlc2l6ZTogdHJ1ZSxcbiAgICAgICAgICAgIGF1dG9DZW50ZXI6ICFpc1RvdWNoLFxuICAgICAgICAgICAgZml0VG9WaWV3OiB0cnVlLFxuICAgICAgICAgICAgYXNwZWN0UmF0aW86IGZhbHNlLFxuICAgICAgICAgICAgdG9wUmF0aW86IDAuNSxcbiAgICAgICAgICAgIGxlZnRSYXRpbzogMC41LFxuXG4gICAgICAgICAgICBzY3JvbGxpbmc6ICdhdXRvJywgLy8gJ2F1dG8nLCAneWVzJyBvciAnbm8nXG4gICAgICAgICAgICB3cmFwQ1NTOiAnJyxcblxuICAgICAgICAgICAgYXJyb3dzOiB0cnVlLFxuICAgICAgICAgICAgY2xvc2VCdG46IHRydWUsXG4gICAgICAgICAgICBjbG9zZUNsaWNrOiBmYWxzZSxcbiAgICAgICAgICAgIG5leHRDbGljazogZmFsc2UsXG4gICAgICAgICAgICBtb3VzZVdoZWVsOiB0cnVlLFxuICAgICAgICAgICAgYXV0b1BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgcGxheVNwZWVkOiAzMDAwLFxuICAgICAgICAgICAgcHJlbG9hZDogMyxcbiAgICAgICAgICAgIG1vZGFsOiBmYWxzZSxcbiAgICAgICAgICAgIGxvb3A6IHRydWUsXG5cbiAgICAgICAgICAgIGFqYXg6IHtcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2h0bWwnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ1gtZmFuY3lCb3gnOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlmcmFtZToge1xuICAgICAgICAgICAgICAgIHNjcm9sbGluZzogJ2F1dG8nLFxuICAgICAgICAgICAgICAgIHByZWxvYWQ6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzd2Y6IHtcbiAgICAgICAgICAgICAgICB3bW9kZTogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgICAgICBhbGxvd2Z1bGxzY3JlZW46ICd0cnVlJyxcbiAgICAgICAgICAgICAgICBhbGxvd3NjcmlwdGFjY2VzczogJ2Fsd2F5cydcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGtleXM6IHtcbiAgICAgICAgICAgICAgICBuZXh0OiB7XG4gICAgICAgICAgICAgICAgICAgIDEzOiAnbGVmdCcsIC8vIGVudGVyXG4gICAgICAgICAgICAgICAgICAgIDM0OiAndXAnLCAvLyBwYWdlIGRvd25cbiAgICAgICAgICAgICAgICAgICAgMzk6ICdsZWZ0JywgLy8gcmlnaHQgYXJyb3dcbiAgICAgICAgICAgICAgICAgICAgNDA6ICd1cCcgLy8gZG93biBhcnJvd1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcHJldjoge1xuICAgICAgICAgICAgICAgICAgICA4OiAncmlnaHQnLCAvLyBiYWNrc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgMzM6ICdkb3duJywgLy8gcGFnZSB1cFxuICAgICAgICAgICAgICAgICAgICAzNzogJ3JpZ2h0JywgLy8gbGVmdCBhcnJvd1xuICAgICAgICAgICAgICAgICAgICAzODogJ2Rvd24nIC8vIHVwIGFycm93XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjbG9zZTogWzI3XSwgLy8gZXNjYXBlIGtleVxuICAgICAgICAgICAgICAgIHBsYXk6IFszMl0sIC8vIHNwYWNlIC0gc3RhcnQvc3RvcCBzbGlkZXNob3dcbiAgICAgICAgICAgICAgICB0b2dnbGU6IFs3MF0gLy8gbGV0dGVyIFwiZlwiIC0gdG9nZ2xlIGZ1bGxzY3JlZW5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRpcmVjdGlvbjoge1xuICAgICAgICAgICAgICAgIG5leHQ6ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICBwcmV2OiAncmlnaHQnXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzY3JvbGxPdXRzaWRlOiB0cnVlLFxuXG4gICAgICAgICAgICAvLyBPdmVycmlkZSBzb21lIHByb3BlcnRpZXNcbiAgICAgICAgICAgIGluZGV4OiAwLFxuICAgICAgICAgICAgdHlwZTogbnVsbCxcbiAgICAgICAgICAgIGhyZWY6IG51bGwsXG4gICAgICAgICAgICBjb250ZW50OiBudWxsLFxuICAgICAgICAgICAgdGl0bGU6IG51bGwsXG5cbiAgICAgICAgICAgIC8vIEhUTUwgdGVtcGxhdGVzXG4gICAgICAgICAgICB0cGw6IHtcbiAgICAgICAgICAgICAgICB3cmFwOiAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXdyYXBcIiB0YWJJbmRleD1cIi0xXCI+PGRpdiBjbGFzcz1cImZhbmN5Ym94LXNraW5cIj48ZGl2IGNsYXNzPVwiZmFuY3lib3gtb3V0ZXJcIj48ZGl2IGNsYXNzPVwiZmFuY3lib3gtaW5uZXJcIj48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj4nLFxuICAgICAgICAgICAgICAgIGltYWdlOiAnPGltZyBjbGFzcz1cImZhbmN5Ym94LWltYWdlXCIgc3JjPVwie2hyZWZ9XCIgYWx0PVwiXCIgLz4nLFxuICAgICAgICAgICAgICAgIGlmcmFtZTogJzxpZnJhbWUgaWQ9XCJmYW5jeWJveC1mcmFtZXtybmR9XCIgbmFtZT1cImZhbmN5Ym94LWZyYW1le3JuZH1cIiBjbGFzcz1cImZhbmN5Ym94LWlmcmFtZVwiIGZyYW1lYm9yZGVyPVwiMFwiIHZzcGFjZT1cIjBcIiBoc3BhY2U9XCIwXCIgd2Via2l0QWxsb3dGdWxsU2NyZWVuIG1vemFsbG93ZnVsbHNjcmVlbiBhbGxvd0Z1bGxTY3JlZW4nICsgKElFID8gJyBhbGxvd3RyYW5zcGFyZW5jeT1cInRydWVcIicgOiAnJykgKyAnPjwvaWZyYW1lPicsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICc8cCBjbGFzcz1cImZhbmN5Ym94LWVycm9yXCI+VGhlIHJlcXVlc3RlZCBjb250ZW50IGNhbm5vdCBiZSBsb2FkZWQuPGJyLz5QbGVhc2UgdHJ5IGFnYWluIGxhdGVyLjwvcD4nLFxuICAgICAgICAgICAgICAgIGNsb3NlQnRuOiAnPGEgdGl0bGU9XCJDbG9zZVwiIGNsYXNzPVwiZmFuY3lib3gtaXRlbSBmYW5jeWJveC1jbG9zZVwiIGhyZWY9XCJqYXZhc2NyaXB0OjtcIj48L2E+JyxcbiAgICAgICAgICAgICAgICBuZXh0OiAnPGEgdGl0bGU9XCJOZXh0XCIgY2xhc3M9XCJmYW5jeWJveC1uYXYgZmFuY3lib3gtbmV4dFwiIGhyZWY9XCJqYXZhc2NyaXB0OjtcIj48c3Bhbj48L3NwYW4+PC9hPicsXG4gICAgICAgICAgICAgICAgcHJldjogJzxhIHRpdGxlPVwiUHJldmlvdXNcIiBjbGFzcz1cImZhbmN5Ym94LW5hdiBmYW5jeWJveC1wcmV2XCIgaHJlZj1cImphdmFzY3JpcHQ6O1wiPjxzcGFuPjwvc3Bhbj48L2E+JyxcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiAnPGRpdiBpZD1cImZhbmN5Ym94LWxvYWRpbmdcIj48ZGl2PjwvZGl2PjwvZGl2PidcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIFByb3BlcnRpZXMgZm9yIGVhY2ggYW5pbWF0aW9uIHR5cGVcbiAgICAgICAgICAgIC8vIE9wZW5pbmcgZmFuY3lCb3hcbiAgICAgICAgICAgIG9wZW5FZmZlY3Q6ICdmYWRlJywgLy8gJ2VsYXN0aWMnLCAnZmFkZScgb3IgJ25vbmUnXG4gICAgICAgICAgICBvcGVuU3BlZWQ6IDI1MCxcbiAgICAgICAgICAgIG9wZW5FYXNpbmc6ICdzd2luZycsXG4gICAgICAgICAgICBvcGVuT3BhY2l0eTogdHJ1ZSxcbiAgICAgICAgICAgIG9wZW5NZXRob2Q6ICd6b29tSW4nLFxuXG4gICAgICAgICAgICAvLyBDbG9zaW5nIGZhbmN5Qm94XG4gICAgICAgICAgICBjbG9zZUVmZmVjdDogJ2ZhZGUnLCAvLyAnZWxhc3RpYycsICdmYWRlJyBvciAnbm9uZSdcbiAgICAgICAgICAgIGNsb3NlU3BlZWQ6IDI1MCxcbiAgICAgICAgICAgIGNsb3NlRWFzaW5nOiAnc3dpbmcnLFxuICAgICAgICAgICAgY2xvc2VPcGFjaXR5OiB0cnVlLFxuICAgICAgICAgICAgY2xvc2VNZXRob2Q6ICd6b29tT3V0JyxcblxuICAgICAgICAgICAgLy8gQ2hhbmdpbmcgbmV4dCBnYWxsZXJ5IGl0ZW1cbiAgICAgICAgICAgIG5leHRFZmZlY3Q6ICdlbGFzdGljJywgLy8gJ2VsYXN0aWMnLCAnZmFkZScgb3IgJ25vbmUnXG4gICAgICAgICAgICBuZXh0U3BlZWQ6IDI1MCxcbiAgICAgICAgICAgIG5leHRFYXNpbmc6ICdzd2luZycsXG4gICAgICAgICAgICBuZXh0TWV0aG9kOiAnY2hhbmdlSW4nLFxuXG4gICAgICAgICAgICAvLyBDaGFuZ2luZyBwcmV2aW91cyBnYWxsZXJ5IGl0ZW1cbiAgICAgICAgICAgIHByZXZFZmZlY3Q6ICdlbGFzdGljJywgLy8gJ2VsYXN0aWMnLCAnZmFkZScgb3IgJ25vbmUnXG4gICAgICAgICAgICBwcmV2U3BlZWQ6IDI1MCxcbiAgICAgICAgICAgIHByZXZFYXNpbmc6ICdzd2luZycsXG4gICAgICAgICAgICBwcmV2TWV0aG9kOiAnY2hhbmdlT3V0JyxcblxuICAgICAgICAgICAgLy8gRW5hYmxlIGRlZmF1bHQgaGVscGVyc1xuICAgICAgICAgICAgaGVscGVyczoge1xuICAgICAgICAgICAgICAgIG92ZXJsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRydWVcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIENhbGxiYWNrc1xuICAgICAgICAgICAgb25DYW5jZWw6IGpRdWVyeS5ub29wLCAvLyBJZiBjYW5jZWxpbmdcbiAgICAgICAgICAgIGJlZm9yZUxvYWQ6IGpRdWVyeS5ub29wLCAvLyBCZWZvcmUgbG9hZGluZ1xuICAgICAgICAgICAgYWZ0ZXJMb2FkOiBqUXVlcnkubm9vcCwgLy8gQWZ0ZXIgbG9hZGluZ1xuICAgICAgICAgICAgYmVmb3JlU2hvdzogalF1ZXJ5Lm5vb3AsIC8vIEJlZm9yZSBjaGFuZ2luZyBpbiBjdXJyZW50IGl0ZW1cbiAgICAgICAgICAgIGFmdGVyU2hvdzogalF1ZXJ5Lm5vb3AsIC8vIEFmdGVyIG9wZW5pbmdcbiAgICAgICAgICAgIGJlZm9yZUNoYW5nZTogalF1ZXJ5Lm5vb3AsIC8vIEJlZm9yZSBjaGFuZ2luZyBnYWxsZXJ5IGl0ZW1cbiAgICAgICAgICAgIGJlZm9yZUNsb3NlOiBqUXVlcnkubm9vcCwgLy8gQmVmb3JlIGNsb3NpbmdcbiAgICAgICAgICAgIGFmdGVyQ2xvc2U6IGpRdWVyeS5ub29wIC8vIEFmdGVyIGNsb3NpbmdcbiAgICAgICAgfSxcblxuICAgICAgICAvL0N1cnJlbnQgc3RhdGVcbiAgICAgICAgZ3JvdXA6IHt9LCAvLyBTZWxlY3RlZCBncm91cFxuICAgICAgICBvcHRzOiB7fSwgLy8gR3JvdXAgb3B0aW9uc1xuICAgICAgICBwcmV2aW91czogbnVsbCwgLy8gUHJldmlvdXMgZWxlbWVudFxuICAgICAgICBjb21pbmc6IG51bGwsIC8vIEVsZW1lbnQgYmVpbmcgbG9hZGVkXG4gICAgICAgIGN1cnJlbnQ6IG51bGwsIC8vIEN1cnJlbnRseSBsb2FkZWQgZWxlbWVudFxuICAgICAgICBpc0FjdGl2ZTogZmFsc2UsIC8vIElzIGFjdGl2YXRlZFxuICAgICAgICBpc09wZW46IGZhbHNlLCAvLyBJcyBjdXJyZW50bHkgb3BlblxuICAgICAgICBpc09wZW5lZDogZmFsc2UsIC8vIEhhdmUgYmVlbiBmdWxseSBvcGVuZWQgYXQgbGVhc3Qgb25jZVxuXG4gICAgICAgIHdyYXA6IG51bGwsXG4gICAgICAgIHNraW46IG51bGwsXG4gICAgICAgIG91dGVyOiBudWxsLFxuICAgICAgICBpbm5lcjogbnVsbCxcblxuICAgICAgICBwbGF5ZXI6IHtcbiAgICAgICAgICAgIHRpbWVyOiBudWxsLFxuICAgICAgICAgICAgaXNBY3RpdmU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gTG9hZGVyc1xuICAgICAgICBhamF4TG9hZDogbnVsbCxcbiAgICAgICAgaW1nUHJlbG9hZDogbnVsbCxcblxuICAgICAgICAvLyBTb21lIGNvbGxlY3Rpb25zXG4gICAgICAgIHRyYW5zaXRpb25zOiB7fSxcbiAgICAgICAgaGVscGVyczoge30sXG5cbiAgICAgICAgLypcbiAgICAgICAgICpcdFN0YXRpYyBtZXRob2RzXG4gICAgICAgICAqL1xuXG4gICAgICAgIG9wZW46IGZ1bmN0aW9uKGdyb3VwLCBvcHRzKSB7XG4gICAgICAgICAgICBpZiAoIWdyb3VwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWpRdWVyeS5pc1BsYWluT2JqZWN0KG9wdHMpKSB7XG4gICAgICAgICAgICAgICAgb3B0cyA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDbG9zZSBpZiBhbHJlYWR5IGFjdGl2ZVxuICAgICAgICAgICAgaWYgKGZhbHNlID09PSBGLmNsb3NlKHRydWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBOb3JtYWxpemUgZ3JvdXBcbiAgICAgICAgICAgIGlmICghalF1ZXJ5LmlzQXJyYXkoZ3JvdXApKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAgPSBpc1F1ZXJ5KGdyb3VwKSA/IGpRdWVyeShncm91cCkuZ2V0KCkgOiBbZ3JvdXBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZWNoZWNrIGlmIHRoZSB0eXBlIG9mIGVhY2ggZWxlbWVudCBpcyBgb2JqZWN0YCBhbmQgc2V0IGNvbnRlbnQgdHlwZSAoaW1hZ2UsIGFqYXgsIGV0YylcbiAgICAgICAgICAgIGpRdWVyeS5lYWNoKGdyb3VwLCBmdW5jdGlvbihpLCBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IHt9LFxuICAgICAgICAgICAgICAgICAgICBocmVmLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcmV6LFxuICAgICAgICAgICAgICAgICAgICBocmVmUGFydHMsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yO1xuXG4gICAgICAgICAgICAgICAgaWYgKGpRdWVyeS50eXBlKGVsZW1lbnQpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGlzIERPTSBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0galF1ZXJ5KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUXVlcnkoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iaiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiBlbGVtZW50LmRhdGEoJ2ZhbmN5Ym94LWhyZWYnKSB8fCBlbGVtZW50LmF0dHIoJ2hyZWYnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogalF1ZXJ5KCc8ZGl2Lz4nKS50ZXh0KGVsZW1lbnQuZGF0YSgnZmFuY3lib3gtdGl0bGUnKSB8fCBlbGVtZW50LmF0dHIoJ3RpdGxlJykgfHwgJycpLmh0bWwoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0RvbTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoalF1ZXJ5Lm1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV4dGVuZCh0cnVlLCBvYmosIGVsZW1lbnQubWV0YWRhdGEoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iaiA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBocmVmID0gb3B0cy5ocmVmIHx8IG9iai5ocmVmIHx8IChpc1N0cmluZyhlbGVtZW50KSA/IGVsZW1lbnQgOiBudWxsKTtcbiAgICAgICAgICAgICAgICB0aXRsZSA9IG9wdHMudGl0bGUgIT09IHVuZGVmaW5lZCA/IG9wdHMudGl0bGUgOiBvYmoudGl0bGUgfHwgJyc7XG5cbiAgICAgICAgICAgICAgICBjb250ZW50ID0gb3B0cy5jb250ZW50IHx8IG9iai5jb250ZW50O1xuICAgICAgICAgICAgICAgIHR5cGUgPSBjb250ZW50ID8gJ2h0bWwnIDogKG9wdHMudHlwZSB8fCBvYmoudHlwZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXR5cGUgJiYgb2JqLmlzRG9tKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSBlbGVtZW50LmRhdGEoJ2ZhbmN5Ym94LXR5cGUnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJleiA9IGVsZW1lbnQucHJvcCgnY2xhc3MnKS5tYXRjaCgvZmFuY3lib3hcXC4oXFx3KykvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSByZXogPyByZXpbMV0gOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlzU3RyaW5nKGhyZWYpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRyeSB0byBndWVzcyB0aGUgY29udGVudCB0eXBlXG4gICAgICAgICAgICAgICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEYuaXNJbWFnZShocmVmKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnaW1hZ2UnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEYuaXNTV0YoaHJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ3N3Zic7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaHJlZi5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnaW5saW5lJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnaHRtbCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBTcGxpdCB1cmwgaW50byB0d28gcGllY2VzIHdpdGggc291cmNlIHVybCBhbmQgY29udGVudCBzZWxlY3RvciwgZS5nLFxuICAgICAgICAgICAgICAgICAgICAvLyBcIi9teXBhZ2UuaHRtbCAjbXlfaWRcIiB3aWxsIGxvYWQgXCIvbXlwYWdlLmh0bWxcIiBhbmQgZGlzcGxheSBlbGVtZW50IGhhdmluZyBpZCBcIm15X2lkXCJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdhamF4Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZlBhcnRzID0gaHJlZi5zcGxpdCgvXFxzKy8sIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZiA9IGhyZWZQYXJ0cy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBocmVmUGFydHMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2lubGluZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGpRdWVyeShpc1N0cmluZyhocmVmKSA/IGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpIDogaHJlZik7IC8vc3RyaXAgZm9yIGllN1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9iai5pc0RvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2h0bWwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gaHJlZjtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0eXBlICYmICFocmVmICYmIG9iai5pc0RvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdpbmxpbmUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKG9iaiwge1xuICAgICAgICAgICAgICAgICAgICBocmVmOiBocmVmLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZ3JvdXBbaV0gPSBvYmo7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gRXh0ZW5kIHRoZSBkZWZhdWx0c1xuICAgICAgICAgICAgRi5vcHRzID0galF1ZXJ5LmV4dGVuZCh0cnVlLCB7fSwgRi5kZWZhdWx0cywgb3B0cyk7XG5cbiAgICAgICAgICAgIC8vIEFsbCBvcHRpb25zIGFyZSBtZXJnZWQgcmVjdXJzaXZlIGV4Y2VwdCBrZXlzXG4gICAgICAgICAgICBpZiAob3B0cy5rZXlzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBGLm9wdHMua2V5cyA9IG9wdHMua2V5cyA/IGpRdWVyeS5leHRlbmQoe30sIEYuZGVmYXVsdHMua2V5cywgb3B0cy5rZXlzKSA6IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBGLmdyb3VwID0gZ3JvdXA7XG5cbiAgICAgICAgICAgIHJldHVybiBGLl9zdGFydChGLm9wdHMuaW5kZXgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIENhbmNlbCBpbWFnZSBsb2FkaW5nIG9yIGFib3J0IGFqYXggcmVxdWVzdFxuICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNvbWluZyA9IEYuY29taW5nO1xuXG4gICAgICAgICAgICBpZiAoY29taW5nICYmIGZhbHNlID09PSBGLnRyaWdnZXIoJ29uQ2FuY2VsJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEYuaGlkZUxvYWRpbmcoKTtcblxuICAgICAgICAgICAgaWYgKCFjb21pbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChGLmFqYXhMb2FkKSB7XG4gICAgICAgICAgICAgICAgRi5hamF4TG9hZC5hYm9ydCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBGLmFqYXhMb2FkID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKEYuaW1nUHJlbG9hZCkge1xuICAgICAgICAgICAgICAgIEYuaW1nUHJlbG9hZC5vbmxvYWQgPSBGLmltZ1ByZWxvYWQub25lcnJvciA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb21pbmcud3JhcCkge1xuICAgICAgICAgICAgICAgIGNvbWluZy53cmFwLnN0b3AodHJ1ZSwgdHJ1ZSkudHJpZ2dlcignb25SZXNldCcpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBGLmNvbWluZyA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBmaXJzdCBpdGVtIGhhcyBiZWVuIGNhbmNlbGVkLCB0aGVuIGNsZWFyIGV2ZXJ5dGhpbmdcbiAgICAgICAgICAgIGlmICghRi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgRi5fYWZ0ZXJab29tT3V0KGNvbWluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gU3RhcnQgY2xvc2luZyBhbmltYXRpb24gaWYgaXMgb3BlbjsgcmVtb3ZlIGltbWVkaWF0ZWx5IGlmIG9wZW5pbmcvY2xvc2luZ1xuICAgICAgICBjbG9zZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIEYuY2FuY2VsKCk7XG5cbiAgICAgICAgICAgIGlmIChmYWxzZSA9PT0gRi50cmlnZ2VyKCdiZWZvcmVDbG9zZScpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBGLnVuYmluZEV2ZW50cygpO1xuXG4gICAgICAgICAgICBpZiAoIUYuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghRi5pc09wZW4gfHwgZXZlbnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBqUXVlcnkoJy5mYW5jeWJveC13cmFwJykuc3RvcCh0cnVlKS50cmlnZ2VyKCdvblJlc2V0JykucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICBGLl9hZnRlclpvb21PdXQoKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBGLmlzT3BlbiA9IEYuaXNPcGVuZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBGLmlzQ2xvc2luZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBqUXVlcnkoJy5mYW5jeWJveC1pdGVtLCAuZmFuY3lib3gtbmF2JykucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICBGLndyYXAuc3RvcCh0cnVlLCB0cnVlKS5yZW1vdmVDbGFzcygnZmFuY3lib3gtb3BlbmVkJyk7XG5cbiAgICAgICAgICAgICAgICBGLnRyYW5zaXRpb25zW0YuY3VycmVudC5jbG9zZU1ldGhvZF0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvLyBNYW5hZ2Ugc2xpZGVzaG93OlxuICAgICAgICAvLyAgIGpRdWVyeS5mYW5jeWJveC5wbGF5KCk7IC0gdG9nZ2xlIHNsaWRlc2hvd1xuICAgICAgICAvLyAgIGpRdWVyeS5mYW5jeWJveC5wbGF5KCB0cnVlICk7IC0gc3RhcnRcbiAgICAgICAgLy8gICBqUXVlcnkuZmFuY3lib3gucGxheSggZmFsc2UgKTsgLSBzdG9wXG4gICAgICAgIHBsYXk6IGZ1bmN0aW9uKGFjdGlvbikge1xuICAgICAgICAgICAgdmFyIGNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChGLnBsYXllci50aW1lcik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXIoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoRi5jdXJyZW50ICYmIEYucGxheWVyLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBGLnBsYXllci50aW1lciA9IHNldFRpbWVvdXQoRi5uZXh0LCBGLmN1cnJlbnQucGxheVNwZWVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhcigpO1xuXG4gICAgICAgICAgICAgICAgICAgIEQudW5iaW5kKCcucGxheWVyJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgRi5wbGF5ZXIuaXNBY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICBGLnRyaWdnZXIoJ29uUGxheUVuZCcpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEYuY3VycmVudCAmJiAoRi5jdXJyZW50Lmxvb3AgfHwgRi5jdXJyZW50LmluZGV4IDwgRi5ncm91cC5sZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgRi5wbGF5ZXIuaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBELmJpbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbkNhbmNlbC5wbGF5ZXIgYmVmb3JlQ2xvc2UucGxheWVyJzogc3RvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25VcGRhdGUucGxheWVyJzogc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiZWZvcmVMb2FkLnBsYXllcic6IGNsZWFyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIEYudHJpZ2dlcignb25QbGF5U3RhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChhY3Rpb24gPT09IHRydWUgfHwgKCFGLnBsYXllci5pc0FjdGl2ZSAmJiBhY3Rpb24gIT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvLyBOYXZpZ2F0ZSB0byBuZXh0IGdhbGxlcnkgaXRlbVxuICAgICAgICBuZXh0OiBmdW5jdGlvbihkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gRi5jdXJyZW50O1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGlmICghaXNTdHJpbmcoZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBjdXJyZW50LmRpcmVjdGlvbi5uZXh0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIEYuanVtcHRvKGN1cnJlbnQuaW5kZXggKyAxLCBkaXJlY3Rpb24sICduZXh0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gTmF2aWdhdGUgdG8gcHJldmlvdXMgZ2FsbGVyeSBpdGVtXG4gICAgICAgIHByZXY6IGZ1bmN0aW9uKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBGLmN1cnJlbnQ7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1N0cmluZyhkaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9IGN1cnJlbnQuZGlyZWN0aW9uLnByZXY7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgRi5qdW1wdG8oY3VycmVudC5pbmRleCAtIDEsIGRpcmVjdGlvbiwgJ3ByZXYnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvLyBOYXZpZ2F0ZSB0byBnYWxsZXJ5IGl0ZW0gYnkgaW5kZXhcbiAgICAgICAganVtcHRvOiBmdW5jdGlvbihpbmRleCwgZGlyZWN0aW9uLCByb3V0ZXIpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gRi5jdXJyZW50O1xuXG4gICAgICAgICAgICBpZiAoIWN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGluZGV4ID0gZ2V0U2NhbGFyKGluZGV4KTtcblxuICAgICAgICAgICAgRi5kaXJlY3Rpb24gPSBkaXJlY3Rpb24gfHwgY3VycmVudC5kaXJlY3Rpb25bKGluZGV4ID49IGN1cnJlbnQuaW5kZXggPyAnbmV4dCcgOiAncHJldicpXTtcbiAgICAgICAgICAgIEYucm91dGVyID0gcm91dGVyIHx8ICdqdW1wdG8nO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudC5sb29wKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGN1cnJlbnQuZ3JvdXAubGVuZ3RoICsgKGluZGV4ICUgY3VycmVudC5ncm91cC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGluZGV4ID0gaW5kZXggJSBjdXJyZW50Lmdyb3VwLmxlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGN1cnJlbnQuZ3JvdXBbaW5kZXhdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBGLmNhbmNlbCgpO1xuXG4gICAgICAgICAgICAgICAgRi5fc3RhcnQoaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIENlbnRlciBpbnNpZGUgdmlld3BvcnQgYW5kIHRvZ2dsZSBwb3NpdGlvbiB0eXBlIHRvIGZpeGVkIG9yIGFic29sdXRlIGlmIG5lZWRlZFxuICAgICAgICByZXBvc2l0aW9uOiBmdW5jdGlvbihlLCBvbmx5QWJzb2x1dGUpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gRi5jdXJyZW50LFxuICAgICAgICAgICAgICAgIHdyYXAgPSBjdXJyZW50ID8gY3VycmVudC53cmFwIDogbnVsbCxcbiAgICAgICAgICAgICAgICBwb3M7XG5cbiAgICAgICAgICAgIGlmICh3cmFwKSB7XG4gICAgICAgICAgICAgICAgcG9zID0gRi5fZ2V0UG9zaXRpb24ob25seUFic29sdXRlKTtcblxuICAgICAgICAgICAgICAgIGlmIChlICYmIGUudHlwZSA9PT0gJ3Njcm9sbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBvcy5wb3NpdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICB3cmFwLnN0b3AodHJ1ZSwgdHJ1ZSkuYW5pbWF0ZShwb3MsIDIwMCk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3cmFwLmNzcyhwb3MpO1xuXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQucG9zID0galF1ZXJ5LmV4dGVuZCh7fSwgY3VycmVudC5kaW0sIHBvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSAoZSAmJiBlLm9yaWdpbmFsRXZlbnQgJiYgZS5vcmlnaW5hbEV2ZW50LnR5cGUpLFxuICAgICAgICAgICAgICAgIGFueXdheSA9ICF0eXBlIHx8IHR5cGUgPT09ICdvcmllbnRhdGlvbmNoYW5nZSc7XG5cbiAgICAgICAgICAgIGlmIChhbnl3YXkpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoZGlkVXBkYXRlKTtcblxuICAgICAgICAgICAgICAgIGRpZFVwZGF0ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghRi5pc09wZW4gfHwgZGlkVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkaWRVcGRhdGUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gRi5jdXJyZW50O1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50IHx8IEYuaXNDbG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBGLndyYXAucmVtb3ZlQ2xhc3MoJ2ZhbmN5Ym94LXRtcCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFueXdheSB8fCB0eXBlID09PSAnbG9hZCcgfHwgKHR5cGUgPT09ICdyZXNpemUnICYmIGN1cnJlbnQuYXV0b1Jlc2l6ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgRi5fc2V0RGltZW5zaW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCEodHlwZSA9PT0gJ3Njcm9sbCcgJiYgY3VycmVudC5jYW5TaHJpbmspKSB7XG4gICAgICAgICAgICAgICAgICAgIEYucmVwb3NpdGlvbihlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBGLnRyaWdnZXIoJ29uVXBkYXRlJyk7XG5cbiAgICAgICAgICAgICAgICBkaWRVcGRhdGUgPSBudWxsO1xuXG4gICAgICAgICAgICB9LCAoYW55d2F5ICYmICFpc1RvdWNoID8gMCA6IDMwMCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIFNocmluayBjb250ZW50IHRvIGZpdCBpbnNpZGUgdmlld3BvcnQgb3IgcmVzdG9yZSBpZiByZXNpemVkXG4gICAgICAgIHRvZ2dsZTogZnVuY3Rpb24oYWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoRi5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICBGLmN1cnJlbnQuZml0VG9WaWV3ID0galF1ZXJ5LnR5cGUoYWN0aW9uKSA9PT0gXCJib29sZWFuXCIgPyBhY3Rpb24gOiAhRi5jdXJyZW50LmZpdFRvVmlldztcblxuICAgICAgICAgICAgICAgIC8vIEhlbHAgYnJvd3NlciB0byByZXN0b3JlIGRvY3VtZW50IGRpbWVuc2lvbnNcbiAgICAgICAgICAgICAgICBpZiAoaXNUb3VjaCkge1xuICAgICAgICAgICAgICAgICAgICBGLndyYXAucmVtb3ZlQXR0cignc3R5bGUnKS5hZGRDbGFzcygnZmFuY3lib3gtdG1wJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgRi50cmlnZ2VyKCdvblVwZGF0ZScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIEYudXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGlkZUxvYWRpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgRC51bmJpbmQoJy5sb2FkaW5nJyk7XG5cbiAgICAgICAgICAgIGpRdWVyeSgnI2ZhbmN5Ym94LWxvYWRpbmcnKS5yZW1vdmUoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzaG93TG9hZGluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZWwsIHZpZXdwb3J0O1xuXG4gICAgICAgICAgICBGLmhpZGVMb2FkaW5nKCk7XG5cbiAgICAgICAgICAgIGVsID0galF1ZXJ5KEYub3B0cy50cGwubG9hZGluZykuY2xpY2soRi5jYW5jZWwpLmFwcGVuZFRvKCdib2R5Jyk7XG5cbiAgICAgICAgICAgIC8vIElmIHVzZXIgd2lsbCBwcmVzcyB0aGUgZXNjYXBlLWJ1dHRvbiwgdGhlIHJlcXVlc3Qgd2lsbCBiZSBjYW5jZWxlZFxuICAgICAgICAgICAgRC5iaW5kKCdrZXlkb3duLmxvYWRpbmcnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKChlLndoaWNoIHx8IGUua2V5Q29kZSkgPT09IDI3KSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICBGLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIUYuZGVmYXVsdHMuZml4ZWQpIHtcbiAgICAgICAgICAgICAgICB2aWV3cG9ydCA9IEYuZ2V0Vmlld3BvcnQoKTtcblxuICAgICAgICAgICAgICAgIGVsLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgICAgICB0b3A6ICh2aWV3cG9ydC5oICogMC41KSArIHZpZXdwb3J0LnksXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6ICh2aWV3cG9ydC53ICogMC41KSArIHZpZXdwb3J0LnhcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRi50cmlnZ2VyKCdvbkxvYWRpbmcnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRWaWV3cG9ydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbG9ja2VkID0gKEYuY3VycmVudCAmJiBGLmN1cnJlbnQubG9ja2VkKSB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXogPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IFcuc2Nyb2xsTGVmdCgpLFxuICAgICAgICAgICAgICAgICAgICB5OiBXLnNjcm9sbFRvcCgpXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGxvY2tlZCAmJiBsb2NrZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV6LncgPSBsb2NrZWRbMF0uY2xpZW50V2lkdGg7XG4gICAgICAgICAgICAgICAgcmV6LmggPSBsb2NrZWRbMF0uY2xpZW50SGVpZ2h0O1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC82NzI0XG4gICAgICAgICAgICAgICAgcmV6LncgPSBpc1RvdWNoICYmIHdpbmRvdy5pbm5lcldpZHRoID8gd2luZG93LmlubmVyV2lkdGggOiBXLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgcmV6LmggPSBpc1RvdWNoICYmIHdpbmRvdy5pbm5lckhlaWdodCA/IHdpbmRvdy5pbm5lckhlaWdodCA6IFcuaGVpZ2h0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXo7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gVW5iaW5kIHRoZSBrZXlib2FyZCAvIGNsaWNraW5nIGFjdGlvbnNcbiAgICAgICAgdW5iaW5kRXZlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChGLndyYXAgJiYgaXNRdWVyeShGLndyYXApKSB7XG4gICAgICAgICAgICAgICAgRi53cmFwLnVuYmluZCgnLmZiJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEQudW5iaW5kKCcuZmInKTtcbiAgICAgICAgICAgIFcudW5iaW5kKCcuZmInKTtcbiAgICAgICAgfSxcblxuICAgICAgICBiaW5kRXZlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gRi5jdXJyZW50LFxuICAgICAgICAgICAgICAgIGtleXM7XG5cbiAgICAgICAgICAgIGlmICghY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hhbmdpbmcgZG9jdW1lbnQgaGVpZ2h0IG9uIGlPUyBkZXZpY2VzIHRyaWdnZXJzIGEgJ3Jlc2l6ZScgZXZlbnQsXG4gICAgICAgICAgICAvLyB0aGF0IGNhbiBjaGFuZ2UgZG9jdW1lbnQgaGVpZ2h0Li4uIHJlcGVhdGluZyBpbmZpbml0ZWx5XG4gICAgICAgICAgICBXLmJpbmQoJ29yaWVudGF0aW9uY2hhbmdlLmZiJyArIChpc1RvdWNoID8gJycgOiAnIHJlc2l6ZS5mYicpICsgKGN1cnJlbnQuYXV0b0NlbnRlciAmJiAhY3VycmVudC5sb2NrZWQgPyAnIHNjcm9sbC5mYicgOiAnJyksIEYudXBkYXRlKTtcblxuICAgICAgICAgICAga2V5cyA9IGN1cnJlbnQua2V5cztcblxuICAgICAgICAgICAgaWYgKGtleXMpIHtcbiAgICAgICAgICAgICAgICBELmJpbmQoJ2tleWRvd24uZmInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2RlID0gZS53aGljaCB8fCBlLmtleUNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2tpcCBlc2Mga2V5IGlmIGxvYWRpbmcsIGJlY2F1c2Ugc2hvd0xvYWRpbmcgd2lsbCBjYW5jZWwgcHJlbG9hZGluZ1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gMjcgJiYgRi5jb21pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSBrZXkgY29tYmluYXRpb25zIGFuZCBrZXkgZXZlbnRzIHdpdGhpbiBmb3JtIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgICAgIGlmICghZS5jdHJsS2V5ICYmICFlLmFsdEtleSAmJiAhZS5zaGlmdEtleSAmJiAhZS5tZXRhS2V5ICYmICEodGFyZ2V0ICYmICh0YXJnZXQudHlwZSB8fCBqUXVlcnkodGFyZ2V0KS5pcygnW2NvbnRlbnRlZGl0YWJsZV0nKSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZWFjaChrZXlzLCBmdW5jdGlvbihpLCB2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5ncm91cC5sZW5ndGggPiAxICYmIHZhbFtjb2RlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZbaV0odmFsW2NvZGVdKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoalF1ZXJ5LmluQXJyYXkoY29kZSwgdmFsKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZbaV0oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoalF1ZXJ5LmZuLm1vdXNld2hlZWwgJiYgY3VycmVudC5tb3VzZVdoZWVsKSB7XG4gICAgICAgICAgICAgICAgRi53cmFwLmJpbmQoJ21vdXNld2hlZWwuZmInLCBmdW5jdGlvbihlLCBkZWx0YSwgZGVsdGFYLCBkZWx0YVkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBqUXVlcnkodGFyZ2V0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhblNjcm9sbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwYXJlbnQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FuU2Nyb2xsIHx8IHBhcmVudC5pcygnLmZhbmN5Ym94LXNraW4nKSB8fCBwYXJlbnQuaXMoJy5mYW5jeWJveC13cmFwJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FuU2Nyb2xsID0gaXNTY3JvbGxhYmxlKHBhcmVudFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBqUXVlcnkocGFyZW50KS5wYXJlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWx0YSAhPT0gMCAmJiAhY2FuU2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoRi5ncm91cC5sZW5ndGggPiAxICYmICFjdXJyZW50LmNhblNocmluaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWx0YVkgPiAwIHx8IGRlbHRhWCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRi5wcmV2KGRlbHRhWSA+IDAgPyAnZG93bicgOiAnbGVmdCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZWx0YVkgPCAwIHx8IGRlbHRhWCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRi5uZXh0KGRlbHRhWSA8IDAgPyAndXAnIDogJ3JpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJpZ2dlcjogZnVuY3Rpb24oZXZlbnQsIG8pIHtcbiAgICAgICAgICAgIHZhciByZXQsIG9iaiA9IG8gfHwgRi5jb21pbmcgfHwgRi5jdXJyZW50O1xuXG4gICAgICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGpRdWVyeS5pc0Z1bmN0aW9uKG9ialtldmVudF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldCA9IG9ialtldmVudF0uYXBwbHkob2JqLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmV0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9iai5oZWxwZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeS5lYWNoKG9iai5oZWxwZXJzLCBmdW5jdGlvbihoZWxwZXIsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzICYmIEYuaGVscGVyc1toZWxwZXJdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKEYuaGVscGVyc1toZWxwZXJdW2V2ZW50XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGLmhlbHBlcnNbaGVscGVyXVtldmVudF0oalF1ZXJ5LmV4dGVuZCh0cnVlLCB7fSwgRi5oZWxwZXJzW2hlbHBlcl0uZGVmYXVsdHMsIG9wdHMpLCBvYmopO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEQudHJpZ2dlcihldmVudCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNJbWFnZTogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNTdHJpbmcoc3RyKSAmJiBzdHIubWF0Y2goLyheZGF0YTppbWFnZVxcLy4qLCl8KFxcLihqcChlfGd8ZWcpfGdpZnxwbmd8Ym1wfHdlYnB8c3ZnKSgoXFw/fCMpLiopPyQpL2kpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzU1dGOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgIHJldHVybiBpc1N0cmluZyhzdHIpICYmIHN0ci5tYXRjaCgvXFwuKHN3ZikoKFxcP3wjKS4qKT8kL2kpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9zdGFydDogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBjb21pbmcgPSB7fSxcbiAgICAgICAgICAgICAgICBvYmosXG4gICAgICAgICAgICAgICAgaHJlZixcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgIG1hcmdpbixcbiAgICAgICAgICAgICAgICBwYWRkaW5nO1xuXG4gICAgICAgICAgICBpbmRleCA9IGdldFNjYWxhcihpbmRleCk7XG4gICAgICAgICAgICBvYmogPSBGLmdyb3VwW2luZGV4XSB8fCBudWxsO1xuXG4gICAgICAgICAgICBpZiAoIW9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29taW5nID0galF1ZXJ5LmV4dGVuZCh0cnVlLCB7fSwgRi5vcHRzLCBvYmopO1xuXG4gICAgICAgICAgICAvLyBDb252ZXJ0IG1hcmdpbiBhbmQgcGFkZGluZyBwcm9wZXJ0aWVzIHRvIGFycmF5IC0gdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XG4gICAgICAgICAgICBtYXJnaW4gPSBjb21pbmcubWFyZ2luO1xuICAgICAgICAgICAgcGFkZGluZyA9IGNvbWluZy5wYWRkaW5nO1xuXG4gICAgICAgICAgICBpZiAoalF1ZXJ5LnR5cGUobWFyZ2luKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBjb21pbmcubWFyZ2luID0gW21hcmdpbiwgbWFyZ2luLCBtYXJnaW4sIG1hcmdpbl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChqUXVlcnkudHlwZShwYWRkaW5nKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBjb21pbmcucGFkZGluZyA9IFtwYWRkaW5nLCBwYWRkaW5nLCBwYWRkaW5nLCBwYWRkaW5nXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gJ21vZGFsJyBwcm9wZXJ5IGlzIGp1c3QgYSBzaG9ydGN1dFxuICAgICAgICAgICAgaWYgKGNvbWluZy5tb2RhbCkge1xuICAgICAgICAgICAgICAgIGpRdWVyeS5leHRlbmQodHJ1ZSwgY29taW5nLCB7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlQnRuOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VDbGljazogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG5leHRDbGljazogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1vdXNlV2hlZWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBrZXlzOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBoZWxwZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVybGF5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VDbGljazogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyAnYXV0b1NpemUnIHByb3BlcnR5IGlzIGEgc2hvcnRjdXQsIHRvb1xuICAgICAgICAgICAgaWYgKGNvbWluZy5hdXRvU2l6ZSkge1xuICAgICAgICAgICAgICAgIGNvbWluZy5hdXRvV2lkdGggPSBjb21pbmcuYXV0b0hlaWdodCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb21pbmcud2lkdGggPT09ICdhdXRvJykge1xuICAgICAgICAgICAgICAgIGNvbWluZy5hdXRvV2lkdGggPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29taW5nLmhlaWdodCA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICAgICAgY29taW5nLmF1dG9IZWlnaHQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQWRkIHJlZmVyZW5jZSB0byB0aGUgZ3JvdXAsIHNvIGl0YHMgcG9zc2libGUgdG8gYWNjZXNzIGZyb20gY2FsbGJhY2tzLCBleGFtcGxlOlxuICAgICAgICAgICAgICogYWZ0ZXJMb2FkIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgKiAgICAgdGhpcy50aXRsZSA9ICdJbWFnZSAnICsgKHRoaXMuaW5kZXggKyAxKSArICcgb2YgJyArIHRoaXMuZ3JvdXAubGVuZ3RoICsgKHRoaXMudGl0bGUgPyAnIC0gJyArIHRoaXMudGl0bGUgOiAnJyk7XG4gICAgICAgICAgICAgKiB9XG4gICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgY29taW5nLmdyb3VwID0gRi5ncm91cDtcbiAgICAgICAgICAgIGNvbWluZy5pbmRleCA9IGluZGV4O1xuXG4gICAgICAgICAgICAvLyBHaXZlIGEgY2hhbmNlIGZvciBjYWxsYmFjayBvciBoZWxwZXJzIHRvIHVwZGF0ZSBjb21pbmcgaXRlbSAodHlwZSwgdGl0bGUsIGV0YylcbiAgICAgICAgICAgIEYuY29taW5nID0gY29taW5nO1xuXG4gICAgICAgICAgICBpZiAoZmFsc2UgPT09IEYudHJpZ2dlcignYmVmb3JlTG9hZCcpKSB7XG4gICAgICAgICAgICAgICAgRi5jb21pbmcgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0eXBlID0gY29taW5nLnR5cGU7XG4gICAgICAgICAgICBocmVmID0gY29taW5nLmhyZWY7XG5cbiAgICAgICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgICAgIEYuY29taW5nID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8vSWYgd2UgY2FuIG5vdCBkZXRlcm1pbmUgY29udGVudCB0eXBlIHRoZW4gZHJvcCBzaWxlbnRseSBvciBkaXNwbGF5IG5leHQvcHJldiBpdGVtIGlmIGxvb3BpbmcgdGhyb3VnaCBnYWxsZXJ5XG4gICAgICAgICAgICAgICAgaWYgKEYuY3VycmVudCAmJiBGLnJvdXRlciAmJiBGLnJvdXRlciAhPT0gJ2p1bXB0bycpIHtcbiAgICAgICAgICAgICAgICAgICAgRi5jdXJyZW50LmluZGV4ID0gaW5kZXg7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZbRi5yb3V0ZXJdKEYuZGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEYuaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2ltYWdlJyB8fCB0eXBlID09PSAnc3dmJykge1xuICAgICAgICAgICAgICAgIGNvbWluZy5hdXRvSGVpZ2h0ID0gY29taW5nLmF1dG9XaWR0aCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbWluZy5zY3JvbGxpbmcgPSAndmlzaWJsZSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnaW1hZ2UnKSB7XG4gICAgICAgICAgICAgICAgY29taW5nLmFzcGVjdFJhdGlvID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdpZnJhbWUnICYmIGlzVG91Y2gpIHtcbiAgICAgICAgICAgICAgICBjb21pbmcuc2Nyb2xsaW5nID0gJ3Njcm9sbCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEJ1aWxkIHRoZSBuZWNjZXNzYXJ5IG1hcmt1cFxuICAgICAgICAgICAgY29taW5nLndyYXAgPSBqUXVlcnkoY29taW5nLnRwbC53cmFwKS5hZGRDbGFzcygnZmFuY3lib3gtJyArIChpc1RvdWNoID8gJ21vYmlsZScgOiAnZGVza3RvcCcpICsgJyBmYW5jeWJveC10eXBlLScgKyB0eXBlICsgJyBmYW5jeWJveC10bXAgJyArIGNvbWluZy53cmFwQ1NTKS5hcHBlbmRUbyhjb21pbmcucGFyZW50IHx8ICdib2R5Jyk7XG5cbiAgICAgICAgICAgIGpRdWVyeS5leHRlbmQoY29taW5nLCB7XG4gICAgICAgICAgICAgICAgc2tpbjogalF1ZXJ5KCcuZmFuY3lib3gtc2tpbicsIGNvbWluZy53cmFwKSxcbiAgICAgICAgICAgICAgICBvdXRlcjogalF1ZXJ5KCcuZmFuY3lib3gtb3V0ZXInLCBjb21pbmcud3JhcCksXG4gICAgICAgICAgICAgICAgaW5uZXI6IGpRdWVyeSgnLmZhbmN5Ym94LWlubmVyJywgY29taW5nLndyYXApXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgalF1ZXJ5LmVhY2goW1wiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCJdLCBmdW5jdGlvbihpLCB2KSB7XG4gICAgICAgICAgICAgICAgY29taW5nLnNraW4uY3NzKCdwYWRkaW5nJyArIHYsIGdldFZhbHVlKGNvbWluZy5wYWRkaW5nW2ldKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgRi50cmlnZ2VyKCdvblJlYWR5Jyk7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGJlZm9yZSB0cnkgdG8gbG9hZDsgJ2lubGluZScgYW5kICdodG1sJyB0eXBlcyBuZWVkIGNvbnRlbnQsIG90aGVycyAtIGhyZWZcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnaW5saW5lJyB8fCB0eXBlID09PSAnaHRtbCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbWluZy5jb250ZW50IHx8ICFjb21pbmcuY29udGVudC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEYuX2Vycm9yKCdjb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFocmVmKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEYuX2Vycm9yKCdocmVmJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnaW1hZ2UnKSB7XG4gICAgICAgICAgICAgICAgRi5fbG9hZEltYWdlKCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2FqYXgnKSB7XG4gICAgICAgICAgICAgICAgRi5fbG9hZEFqYXgoKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnaWZyYW1lJykge1xuICAgICAgICAgICAgICAgIEYuX2xvYWRJZnJhbWUoKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBGLl9hZnRlckxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBfZXJyb3I6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgICAgIGpRdWVyeS5leHRlbmQoRi5jb21pbmcsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnaHRtbCcsXG4gICAgICAgICAgICAgICAgYXV0b1dpZHRoOiB0cnVlLFxuICAgICAgICAgICAgICAgIGF1dG9IZWlnaHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbWluV2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgbWluSGVpZ2h0OiAwLFxuICAgICAgICAgICAgICAgIHNjcm9sbGluZzogJ25vJyxcbiAgICAgICAgICAgICAgICBoYXNFcnJvcjogdHlwZSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBGLmNvbWluZy50cGwuZXJyb3JcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBGLl9hZnRlckxvYWQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBfbG9hZEltYWdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIFJlc2V0IHByZWxvYWQgaW1hZ2Ugc28gaXQgaXMgbGF0ZXIgcG9zc2libGUgdG8gY2hlY2sgXCJjb21wbGV0ZVwiIHByb3BlcnR5XG4gICAgICAgICAgICB2YXIgaW1nID0gRi5pbWdQcmVsb2FkID0gbmV3IEltYWdlKCk7XG5cbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ubG9hZCA9IHRoaXMub25lcnJvciA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBGLmNvbWluZy53aWR0aCA9IHRoaXMud2lkdGggLyBGLm9wdHMucGl4ZWxSYXRpbztcbiAgICAgICAgICAgICAgICBGLmNvbWluZy5oZWlnaHQgPSB0aGlzLmhlaWdodCAvIEYub3B0cy5waXhlbFJhdGlvO1xuXG4gICAgICAgICAgICAgICAgRi5fYWZ0ZXJMb2FkKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWcub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMub25sb2FkID0gdGhpcy5vbmVycm9yID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIEYuX2Vycm9yKCdpbWFnZScpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1nLnNyYyA9IEYuY29taW5nLmhyZWY7XG5cbiAgICAgICAgICAgIGlmIChpbWcuY29tcGxldGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBGLnNob3dMb2FkaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2xvYWRBamF4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjb21pbmcgPSBGLmNvbWluZztcblxuICAgICAgICAgICAgRi5zaG93TG9hZGluZygpO1xuXG4gICAgICAgICAgICBGLmFqYXhMb2FkID0galF1ZXJ5LmFqYXgoalF1ZXJ5LmV4dGVuZCh7fSwgY29taW5nLmFqYXgsIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbWluZy5ocmVmLFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihqcVhIUiwgdGV4dFN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoRi5jb21pbmcgJiYgdGV4dFN0YXR1cyAhPT0gJ2Fib3J0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgRi5fZXJyb3IoJ2FqYXgnLCBqcVhIUik7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEYuaGlkZUxvYWRpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGV4dFN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21pbmcuY29udGVudCA9IGRhdGE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIEYuX2FmdGVyTG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9sb2FkSWZyYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjb21pbmcgPSBGLmNvbWluZyxcbiAgICAgICAgICAgICAgICBpZnJhbWUgPSBqUXVlcnkoY29taW5nLnRwbC5pZnJhbWUucmVwbGFjZSgvXFx7cm5kXFx9L2csIG5ldyBEYXRlKCkuZ2V0VGltZSgpKSlcbiAgICAgICAgICAgICAgICAuYXR0cignc2Nyb2xsaW5nJywgaXNUb3VjaCA/ICdhdXRvJyA6IGNvbWluZy5pZnJhbWUuc2Nyb2xsaW5nKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdzcmMnLCBjb21pbmcuaHJlZik7XG5cbiAgICAgICAgICAgIC8vIFRoaXMgaGVscHMgSUVcbiAgICAgICAgICAgIGpRdWVyeShjb21pbmcud3JhcCkuYmluZCgnb25SZXNldCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeSh0aGlzKS5maW5kKCdpZnJhbWUnKS5oaWRlKCkuYXR0cignc3JjJywgJy8vYWJvdXQ6YmxhbmsnKS5lbmQoKS5lbXB0eSgpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGNvbWluZy5pZnJhbWUucHJlbG9hZCkge1xuICAgICAgICAgICAgICAgIEYuc2hvd0xvYWRpbmcoKTtcblxuICAgICAgICAgICAgICAgIGlmcmFtZS5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KHRoaXMpLmRhdGEoJ3JlYWR5JywgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaU9TIHdpbGwgbG9zZSBzY3JvbGxpbmcgaWYgd2UgcmVzaXplXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNUb3VjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KHRoaXMpLmJpbmQoJ2xvYWQuZmInLCBGLnVwZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBXaXRob3V0IHRoaXMgdHJpY2s6XG4gICAgICAgICAgICAgICAgICAgIC8vICAgLSBpZnJhbWUgd29uJ3Qgc2Nyb2xsIG9uIGlPUyBkZXZpY2VzXG4gICAgICAgICAgICAgICAgICAgIC8vICAgLSBJRTcgc29tZXRpbWVzIGRpc3BsYXlzIGVtcHR5IGlmcmFtZVxuICAgICAgICAgICAgICAgICAgICBqUXVlcnkodGhpcykucGFyZW50cygnLmZhbmN5Ym94LXdyYXAnKS53aWR0aCgnMTAwJScpLnJlbW92ZUNsYXNzKCdmYW5jeWJveC10bXAnKS5zaG93KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgRi5fYWZ0ZXJMb2FkKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbWluZy5jb250ZW50ID0gaWZyYW1lLmFwcGVuZFRvKGNvbWluZy5pbm5lcik7XG5cbiAgICAgICAgICAgIGlmICghY29taW5nLmlmcmFtZS5wcmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgRi5fYWZ0ZXJMb2FkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3ByZWxvYWRJbWFnZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGdyb3VwID0gRi5ncm91cCxcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gRi5jdXJyZW50LFxuICAgICAgICAgICAgICAgIGxlbiA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBjbnQgPSBjdXJyZW50LnByZWxvYWQgPyBNYXRoLm1pbihjdXJyZW50LnByZWxvYWQsIGxlbiAtIDEpIDogMCxcbiAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgIGk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPD0gY250OyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBpdGVtID0gZ3JvdXBbKGN1cnJlbnQuaW5kZXggKyBpKSAlIGxlbl07XG5cbiAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnaW1hZ2UnICYmIGl0ZW0uaHJlZikge1xuICAgICAgICAgICAgICAgICAgICBuZXcgSW1hZ2UoKS5zcmMgPSBpdGVtLmhyZWY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIF9hZnRlckxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNvbWluZyA9IEYuY29taW5nLFxuICAgICAgICAgICAgICAgIHByZXZpb3VzID0gRi5jdXJyZW50LFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gJ2ZhbmN5Ym94LXBsYWNlaG9sZGVyJyxcbiAgICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICBzY3JvbGxpbmcsXG4gICAgICAgICAgICAgICAgaHJlZixcbiAgICAgICAgICAgICAgICBlbWJlZDtcblxuICAgICAgICAgICAgRi5oaWRlTG9hZGluZygpO1xuXG4gICAgICAgICAgICBpZiAoIWNvbWluZyB8fCBGLmlzQWN0aXZlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZhbHNlID09PSBGLnRyaWdnZXIoJ2FmdGVyTG9hZCcsIGNvbWluZywgcHJldmlvdXMpKSB7XG4gICAgICAgICAgICAgICAgY29taW5nLndyYXAuc3RvcCh0cnVlKS50cmlnZ2VyKCdvblJlc2V0JykucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICBGLmNvbWluZyA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICAgICAgICAgIEYudHJpZ2dlcignYmVmb3JlQ2hhbmdlJywgcHJldmlvdXMpO1xuXG4gICAgICAgICAgICAgICAgcHJldmlvdXMud3JhcC5zdG9wKHRydWUpLnJlbW92ZUNsYXNzKCdmYW5jeWJveC1vcGVuZWQnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmZhbmN5Ym94LWl0ZW0sIC5mYW5jeWJveC1uYXYnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEYudW5iaW5kRXZlbnRzKCk7XG5cbiAgICAgICAgICAgIGN1cnJlbnQgPSBjb21pbmc7XG4gICAgICAgICAgICBjb250ZW50ID0gY29taW5nLmNvbnRlbnQ7XG4gICAgICAgICAgICB0eXBlID0gY29taW5nLnR5cGU7XG4gICAgICAgICAgICBzY3JvbGxpbmcgPSBjb21pbmcuc2Nyb2xsaW5nO1xuXG4gICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKEYsIHtcbiAgICAgICAgICAgICAgICB3cmFwOiBjdXJyZW50LndyYXAsXG4gICAgICAgICAgICAgICAgc2tpbjogY3VycmVudC5za2luLFxuICAgICAgICAgICAgICAgIG91dGVyOiBjdXJyZW50Lm91dGVyLFxuICAgICAgICAgICAgICAgIGlubmVyOiBjdXJyZW50LmlubmVyLFxuICAgICAgICAgICAgICAgIGN1cnJlbnQ6IGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcHJldmlvdXM6IHByZXZpb3VzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaHJlZiA9IGN1cnJlbnQuaHJlZjtcblxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnaW5saW5lJzpcbiAgICAgICAgICAgICAgICBjYXNlICdhamF4JzpcbiAgICAgICAgICAgICAgICBjYXNlICdodG1sJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQuc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBqUXVlcnkoJzxkaXY+JykuaHRtbChjb250ZW50KS5maW5kKGN1cnJlbnQuc2VsZWN0b3IpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNRdWVyeShjb250ZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZW50LmRhdGEocGxhY2Vob2xkZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudC5kYXRhKHBsYWNlaG9sZGVyLCBqUXVlcnkoJzxkaXYgY2xhc3M9XCInICsgcGxhY2Vob2xkZXIgKyAnXCI+PC9kaXY+JykuaW5zZXJ0QWZ0ZXIoY29udGVudCkuaGlkZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuc2hvdygpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LndyYXAuYmluZCgnb25SZXNldCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqUXVlcnkodGhpcykuZmluZChjb250ZW50KS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudC5oaWRlKCkucmVwbGFjZUFsbChjb250ZW50LmRhdGEocGxhY2Vob2xkZXIpKS5kYXRhKHBsYWNlaG9sZGVyLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdpbWFnZSc6XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjdXJyZW50LnRwbC5pbWFnZS5yZXBsYWNlKC9cXHtocmVmXFx9L2csIGhyZWYpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3N3Zic6XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSAnPG9iamVjdCBpZD1cImZhbmN5Ym94LXN3ZlwiIGNsYXNzaWQ9XCJjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDBcIiB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCI+PHBhcmFtIG5hbWU9XCJtb3ZpZVwiIHZhbHVlPVwiJyArIGhyZWYgKyAnXCI+PC9wYXJhbT4nO1xuICAgICAgICAgICAgICAgICAgICBlbWJlZCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeS5lYWNoKGN1cnJlbnQuc3dmLCBmdW5jdGlvbihuYW1lLCB2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gJzxwYXJhbSBuYW1lPVwiJyArIG5hbWUgKyAnXCIgdmFsdWU9XCInICsgdmFsICsgJ1wiPjwvcGFyYW0+JztcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtYmVkICs9ICcgJyArIG5hbWUgKyAnPVwiJyArIHZhbCArICdcIic7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gJzxlbWJlZCBzcmM9XCInICsgaHJlZiArICdcIiB0eXBlPVwiYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2hcIiB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCInICsgZW1iZWQgKyAnPjwvZW1iZWQ+PC9vYmplY3Q+JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghKGlzUXVlcnkoY29udGVudCkgJiYgY29udGVudC5wYXJlbnQoKS5pcyhjdXJyZW50LmlubmVyKSkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50LmlubmVyLmFwcGVuZChjb250ZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2l2ZSBhIGNoYW5jZSBmb3IgaGVscGVycyBvciBjYWxsYmFja3MgdG8gdXBkYXRlIGVsZW1lbnRzXG4gICAgICAgICAgICBGLnRyaWdnZXIoJ2JlZm9yZVNob3cnKTtcblxuICAgICAgICAgICAgLy8gU2V0IHNjcm9sbGluZyBiZWZvcmUgY2FsY3VsYXRpbmcgZGltZW5zaW9uc1xuICAgICAgICAgICAgY3VycmVudC5pbm5lci5jc3MoJ292ZXJmbG93Jywgc2Nyb2xsaW5nID09PSAneWVzJyA/ICdzY3JvbGwnIDogKHNjcm9sbGluZyA9PT0gJ25vJyA/ICdoaWRkZW4nIDogc2Nyb2xsaW5nKSk7XG5cbiAgICAgICAgICAgIC8vIFNldCBpbml0aWFsIGRpbWVuc2lvbnMgYW5kIHN0YXJ0IHBvc2l0aW9uXG4gICAgICAgICAgICBGLl9zZXREaW1lbnNpb24oKTtcblxuICAgICAgICAgICAgRi5yZXBvc2l0aW9uKCk7XG5cbiAgICAgICAgICAgIEYuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBGLmNvbWluZyA9IG51bGw7XG5cbiAgICAgICAgICAgIEYuYmluZEV2ZW50cygpO1xuXG4gICAgICAgICAgICBpZiAoIUYuaXNPcGVuZWQpIHtcbiAgICAgICAgICAgICAgICBqUXVlcnkoJy5mYW5jeWJveC13cmFwJykubm90KGN1cnJlbnQud3JhcCkuc3RvcCh0cnVlKS50cmlnZ2VyKCdvblJlc2V0JykucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJldmlvdXMucHJldk1ldGhvZCkge1xuICAgICAgICAgICAgICAgIEYudHJhbnNpdGlvbnNbcHJldmlvdXMucHJldk1ldGhvZF0oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRi50cmFuc2l0aW9uc1tGLmlzT3BlbmVkID8gY3VycmVudC5uZXh0TWV0aG9kIDogY3VycmVudC5vcGVuTWV0aG9kXSgpO1xuXG4gICAgICAgICAgICBGLl9wcmVsb2FkSW1hZ2VzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3NldERpbWVuc2lvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdmlld3BvcnQgPSBGLmdldFZpZXdwb3J0KCksXG4gICAgICAgICAgICAgICAgc3RlcHMgPSAwLFxuICAgICAgICAgICAgICAgIGNhblNocmluayA9IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNhbkV4cGFuZCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdyYXAgPSBGLndyYXAsXG4gICAgICAgICAgICAgICAgc2tpbiA9IEYuc2tpbixcbiAgICAgICAgICAgICAgICBpbm5lciA9IEYuaW5uZXIsXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IEYuY3VycmVudCxcbiAgICAgICAgICAgICAgICB3aWR0aCA9IGN1cnJlbnQud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gY3VycmVudC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgbWluV2lkdGggPSBjdXJyZW50Lm1pbldpZHRoLFxuICAgICAgICAgICAgICAgIG1pbkhlaWdodCA9IGN1cnJlbnQubWluSGVpZ2h0LFxuICAgICAgICAgICAgICAgIG1heFdpZHRoID0gY3VycmVudC5tYXhXaWR0aCxcbiAgICAgICAgICAgICAgICBtYXhIZWlnaHQgPSBjdXJyZW50Lm1heEhlaWdodCxcbiAgICAgICAgICAgICAgICBzY3JvbGxpbmcgPSBjdXJyZW50LnNjcm9sbGluZyxcbiAgICAgICAgICAgICAgICBzY3JvbGxPdXQgPSBjdXJyZW50LnNjcm9sbE91dHNpZGUgPyBjdXJyZW50LnNjcm9sbGJhcldpZHRoIDogMCxcbiAgICAgICAgICAgICAgICBtYXJnaW4gPSBjdXJyZW50Lm1hcmdpbixcbiAgICAgICAgICAgICAgICB3TWFyZ2luID0gZ2V0U2NhbGFyKG1hcmdpblsxXSArIG1hcmdpblszXSksXG4gICAgICAgICAgICAgICAgaE1hcmdpbiA9IGdldFNjYWxhcihtYXJnaW5bMF0gKyBtYXJnaW5bMl0pLFxuICAgICAgICAgICAgICAgIHdQYWRkaW5nLFxuICAgICAgICAgICAgICAgIGhQYWRkaW5nLFxuICAgICAgICAgICAgICAgIHdTcGFjZSxcbiAgICAgICAgICAgICAgICBoU3BhY2UsXG4gICAgICAgICAgICAgICAgb3JpZ1dpZHRoLFxuICAgICAgICAgICAgICAgIG9yaWdIZWlnaHQsXG4gICAgICAgICAgICAgICAgb3JpZ01heFdpZHRoLFxuICAgICAgICAgICAgICAgIG9yaWdNYXhIZWlnaHQsXG4gICAgICAgICAgICAgICAgcmF0aW8sXG4gICAgICAgICAgICAgICAgd2lkdGhfLFxuICAgICAgICAgICAgICAgIGhlaWdodF8sXG4gICAgICAgICAgICAgICAgbWF4V2lkdGhfLFxuICAgICAgICAgICAgICAgIG1heEhlaWdodF8sXG4gICAgICAgICAgICAgICAgaWZyYW1lLFxuICAgICAgICAgICAgICAgIGJvZHk7XG5cbiAgICAgICAgICAgIC8vIFJlc2V0IGRpbWVuc2lvbnMgc28gd2UgY291bGQgcmUtY2hlY2sgYWN0dWFsIHNpemVcbiAgICAgICAgICAgIHdyYXAuYWRkKHNraW4pLmFkZChpbm5lcikud2lkdGgoJ2F1dG8nKS5oZWlnaHQoJ2F1dG8nKS5yZW1vdmVDbGFzcygnZmFuY3lib3gtdG1wJyk7XG5cbiAgICAgICAgICAgIHdQYWRkaW5nID0gZ2V0U2NhbGFyKHNraW4ub3V0ZXJXaWR0aCh0cnVlKSAtIHNraW4ud2lkdGgoKSk7XG4gICAgICAgICAgICBoUGFkZGluZyA9IGdldFNjYWxhcihza2luLm91dGVySGVpZ2h0KHRydWUpIC0gc2tpbi5oZWlnaHQoKSk7XG5cbiAgICAgICAgICAgIC8vIEFueSBzcGFjZSBiZXR3ZWVuIGNvbnRlbnQgYW5kIHZpZXdwb3J0IChtYXJnaW4sIHBhZGRpbmcsIGJvcmRlciwgdGl0bGUpXG4gICAgICAgICAgICB3U3BhY2UgPSB3TWFyZ2luICsgd1BhZGRpbmc7XG4gICAgICAgICAgICBoU3BhY2UgPSBoTWFyZ2luICsgaFBhZGRpbmc7XG5cbiAgICAgICAgICAgIG9yaWdXaWR0aCA9IGlzUGVyY2VudGFnZSh3aWR0aCkgPyAodmlld3BvcnQudyAtIHdTcGFjZSkgKiBnZXRTY2FsYXIod2lkdGgpIC8gMTAwIDogd2lkdGg7XG4gICAgICAgICAgICBvcmlnSGVpZ2h0ID0gaXNQZXJjZW50YWdlKGhlaWdodCkgPyAodmlld3BvcnQuaCAtIGhTcGFjZSkgKiBnZXRTY2FsYXIoaGVpZ2h0KSAvIDEwMCA6IGhlaWdodDtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnQudHlwZSA9PT0gJ2lmcmFtZScpIHtcbiAgICAgICAgICAgICAgICBpZnJhbWUgPSBjdXJyZW50LmNvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5hdXRvSGVpZ2h0ICYmIGlmcmFtZS5kYXRhKCdyZWFkeScpID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWZyYW1lWzBdLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQubG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lci53aWR0aChvcmlnV2lkdGgpLmhlaWdodCg5OTk5KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgPSBpZnJhbWUuY29udGVudHMoKS5maW5kKCdib2R5Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsT3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuY3NzKCdvdmVyZmxvdy14JywgJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdIZWlnaHQgPSBib2R5Lm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnQuYXV0b1dpZHRoIHx8IGN1cnJlbnQuYXV0b0hlaWdodCkge1xuICAgICAgICAgICAgICAgIGlubmVyLmFkZENsYXNzKCdmYW5jeWJveC10bXAnKTtcblxuICAgICAgICAgICAgICAgIC8vIFNldCB3aWR0aCBvciBoZWlnaHQgaW4gY2FzZSB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSBvbmx5IG9uZSBkaW1lbnNpb25cbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnQuYXV0b1dpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlubmVyLndpZHRoKG9yaWdXaWR0aCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50LmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5uZXIuaGVpZ2h0KG9yaWdIZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmF1dG9XaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICBvcmlnV2lkdGggPSBpbm5lci53aWR0aCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ0hlaWdodCA9IGlubmVyLmhlaWdodCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlubmVyLnJlbW92ZUNsYXNzKCdmYW5jeWJveC10bXAnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2lkdGggPSBnZXRTY2FsYXIob3JpZ1dpZHRoKTtcbiAgICAgICAgICAgIGhlaWdodCA9IGdldFNjYWxhcihvcmlnSGVpZ2h0KTtcblxuICAgICAgICAgICAgcmF0aW8gPSBvcmlnV2lkdGggLyBvcmlnSGVpZ2h0O1xuXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGlvbnMgZm9yIHRoZSBjb250ZW50XG4gICAgICAgICAgICBtaW5XaWR0aCA9IGdldFNjYWxhcihpc1BlcmNlbnRhZ2UobWluV2lkdGgpID8gZ2V0U2NhbGFyKG1pbldpZHRoLCAndycpIC0gd1NwYWNlIDogbWluV2lkdGgpO1xuICAgICAgICAgICAgbWF4V2lkdGggPSBnZXRTY2FsYXIoaXNQZXJjZW50YWdlKG1heFdpZHRoKSA/IGdldFNjYWxhcihtYXhXaWR0aCwgJ3cnKSAtIHdTcGFjZSA6IG1heFdpZHRoKTtcblxuICAgICAgICAgICAgbWluSGVpZ2h0ID0gZ2V0U2NhbGFyKGlzUGVyY2VudGFnZShtaW5IZWlnaHQpID8gZ2V0U2NhbGFyKG1pbkhlaWdodCwgJ2gnKSAtIGhTcGFjZSA6IG1pbkhlaWdodCk7XG4gICAgICAgICAgICBtYXhIZWlnaHQgPSBnZXRTY2FsYXIoaXNQZXJjZW50YWdlKG1heEhlaWdodCkgPyBnZXRTY2FsYXIobWF4SGVpZ2h0LCAnaCcpIC0gaFNwYWNlIDogbWF4SGVpZ2h0KTtcblxuICAgICAgICAgICAgLy8gVGhlc2Ugd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBpZiB3cmFwIGNhbiBmaXQgaW4gdGhlIHZpZXdwb3J0XG4gICAgICAgICAgICBvcmlnTWF4V2lkdGggPSBtYXhXaWR0aDtcbiAgICAgICAgICAgIG9yaWdNYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50LmZpdFRvVmlldykge1xuICAgICAgICAgICAgICAgIG1heFdpZHRoID0gTWF0aC5taW4odmlld3BvcnQudyAtIHdTcGFjZSwgbWF4V2lkdGgpO1xuICAgICAgICAgICAgICAgIG1heEhlaWdodCA9IE1hdGgubWluKHZpZXdwb3J0LmggLSBoU3BhY2UsIG1heEhlaWdodCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1heFdpZHRoXyA9IHZpZXdwb3J0LncgLSB3TWFyZ2luO1xuICAgICAgICAgICAgbWF4SGVpZ2h0XyA9IHZpZXdwb3J0LmggLSBoTWFyZ2luO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudC5hc3BlY3RSYXRpbykge1xuICAgICAgICAgICAgICAgIGlmICh3aWR0aCA+IG1heFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gbWF4V2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGdldFNjYWxhcih3aWR0aCAvIHJhdGlvKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0ID4gbWF4SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IG1heEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBnZXRTY2FsYXIoaGVpZ2h0ICogcmF0aW8pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh3aWR0aCA8IG1pbldpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gbWluV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGdldFNjYWxhcih3aWR0aCAvIHJhdGlvKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0IDwgbWluSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IG1pbkhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBnZXRTY2FsYXIoaGVpZ2h0ICogcmF0aW8pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aWR0aCA9IE1hdGgubWF4KG1pbldpZHRoLCBNYXRoLm1pbih3aWR0aCwgbWF4V2lkdGgpKTtcblxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmF1dG9IZWlnaHQgJiYgY3VycmVudC50eXBlICE9PSAnaWZyYW1lJykge1xuICAgICAgICAgICAgICAgICAgICBpbm5lci53aWR0aCh3aWR0aCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaW5uZXIuaGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5tYXgobWluSGVpZ2h0LCBNYXRoLm1pbihoZWlnaHQsIG1heEhlaWdodCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUcnkgdG8gZml0IGluc2lkZSB2aWV3cG9ydCAoaW5jbHVkaW5nIHRoZSB0aXRsZSlcbiAgICAgICAgICAgIGlmIChjdXJyZW50LmZpdFRvVmlldykge1xuICAgICAgICAgICAgICAgIGlubmVyLndpZHRoKHdpZHRoKS5oZWlnaHQoaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIHdyYXAud2lkdGgod2lkdGggKyB3UGFkZGluZyk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZWFsIHdyYXAgZGltZW5zaW9uc1xuICAgICAgICAgICAgICAgIHdpZHRoXyA9IHdyYXAud2lkdGgoKTtcbiAgICAgICAgICAgICAgICBoZWlnaHRfID0gd3JhcC5oZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmFzcGVjdFJhdGlvKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgod2lkdGhfID4gbWF4V2lkdGhfIHx8IGhlaWdodF8gPiBtYXhIZWlnaHRfKSAmJiB3aWR0aCA+IG1pbldpZHRoICYmIGhlaWdodCA+IG1pbkhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZXBzKysgPiAxOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLm1heChtaW5IZWlnaHQsIE1hdGgubWluKG1heEhlaWdodCwgaGVpZ2h0IC0gMTApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gZ2V0U2NhbGFyKGhlaWdodCAqIHJhdGlvKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoIDwgbWluV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IG1pbldpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGdldFNjYWxhcih3aWR0aCAvIHJhdGlvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoID4gbWF4V2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IG1heFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGdldFNjYWxhcih3aWR0aCAvIHJhdGlvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXIud2lkdGgod2lkdGgpLmhlaWdodChoZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3cmFwLndpZHRoKHdpZHRoICsgd1BhZGRpbmcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aF8gPSB3cmFwLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHRfID0gd3JhcC5oZWlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBNYXRoLm1heChtaW5XaWR0aCwgTWF0aC5taW4od2lkdGgsIHdpZHRoIC0gKHdpZHRoXyAtIG1heFdpZHRoXykpKTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5tYXgobWluSGVpZ2h0LCBNYXRoLm1pbihoZWlnaHQsIGhlaWdodCAtIChoZWlnaHRfIC0gbWF4SGVpZ2h0XykpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzY3JvbGxPdXQgJiYgc2Nyb2xsaW5nID09PSAnYXV0bycgJiYgaGVpZ2h0IDwgb3JpZ0hlaWdodCAmJiAod2lkdGggKyB3UGFkZGluZyArIHNjcm9sbE91dCkgPCBtYXhXaWR0aF8pIHtcbiAgICAgICAgICAgICAgICB3aWR0aCArPSBzY3JvbGxPdXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlubmVyLndpZHRoKHdpZHRoKS5oZWlnaHQoaGVpZ2h0KTtcblxuICAgICAgICAgICAgd3JhcC53aWR0aCh3aWR0aCArIHdQYWRkaW5nKTtcblxuICAgICAgICAgICAgd2lkdGhfID0gd3JhcC53aWR0aCgpO1xuICAgICAgICAgICAgaGVpZ2h0XyA9IHdyYXAuaGVpZ2h0KCk7XG5cbiAgICAgICAgICAgIGNhblNocmluayA9ICh3aWR0aF8gPiBtYXhXaWR0aF8gfHwgaGVpZ2h0XyA+IG1heEhlaWdodF8pICYmIHdpZHRoID4gbWluV2lkdGggJiYgaGVpZ2h0ID4gbWluSGVpZ2h0O1xuICAgICAgICAgICAgY2FuRXhwYW5kID0gY3VycmVudC5hc3BlY3RSYXRpbyA/ICh3aWR0aCA8IG9yaWdNYXhXaWR0aCAmJiBoZWlnaHQgPCBvcmlnTWF4SGVpZ2h0ICYmIHdpZHRoIDwgb3JpZ1dpZHRoICYmIGhlaWdodCA8IG9yaWdIZWlnaHQpIDogKCh3aWR0aCA8IG9yaWdNYXhXaWR0aCB8fCBoZWlnaHQgPCBvcmlnTWF4SGVpZ2h0KSAmJiAod2lkdGggPCBvcmlnV2lkdGggfHwgaGVpZ2h0IDwgb3JpZ0hlaWdodCkpO1xuXG4gICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKGN1cnJlbnQsIHtcbiAgICAgICAgICAgICAgICBkaW06IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGdldFZhbHVlKHdpZHRoXyksXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogZ2V0VmFsdWUoaGVpZ2h0XylcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9yaWdXaWR0aDogb3JpZ1dpZHRoLFxuICAgICAgICAgICAgICAgIG9yaWdIZWlnaHQ6IG9yaWdIZWlnaHQsXG4gICAgICAgICAgICAgICAgY2FuU2hyaW5rOiBjYW5TaHJpbmssXG4gICAgICAgICAgICAgICAgY2FuRXhwYW5kOiBjYW5FeHBhbmQsXG4gICAgICAgICAgICAgICAgd1BhZGRpbmc6IHdQYWRkaW5nLFxuICAgICAgICAgICAgICAgIGhQYWRkaW5nOiBoUGFkZGluZyxcbiAgICAgICAgICAgICAgICB3cmFwU3BhY2U6IGhlaWdodF8gLSBza2luLm91dGVySGVpZ2h0KHRydWUpLFxuICAgICAgICAgICAgICAgIHNraW5TcGFjZTogc2tpbi5oZWlnaHQoKSAtIGhlaWdodFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghaWZyYW1lICYmIGN1cnJlbnQuYXV0b0hlaWdodCAmJiBoZWlnaHQgPiBtaW5IZWlnaHQgJiYgaGVpZ2h0IDwgbWF4SGVpZ2h0ICYmICFjYW5FeHBhbmQpIHtcbiAgICAgICAgICAgICAgICBpbm5lci5oZWlnaHQoJ2F1dG8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBfZ2V0UG9zaXRpb246IGZ1bmN0aW9uKG9ubHlBYnNvbHV0ZSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBGLmN1cnJlbnQsXG4gICAgICAgICAgICAgICAgdmlld3BvcnQgPSBGLmdldFZpZXdwb3J0KCksXG4gICAgICAgICAgICAgICAgbWFyZ2luID0gY3VycmVudC5tYXJnaW4sXG4gICAgICAgICAgICAgICAgd2lkdGggPSBGLndyYXAud2lkdGgoKSArIG1hcmdpblsxXSArIG1hcmdpblszXSxcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBGLndyYXAuaGVpZ2h0KCkgKyBtYXJnaW5bMF0gKyBtYXJnaW5bMl0sXG4gICAgICAgICAgICAgICAgcmV6ID0ge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBtYXJnaW5bMF0sXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IG1hcmdpblszXVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50LmF1dG9DZW50ZXIgJiYgY3VycmVudC5maXhlZCAmJiAhb25seUFic29sdXRlICYmIGhlaWdodCA8PSB2aWV3cG9ydC5oICYmIHdpZHRoIDw9IHZpZXdwb3J0LncpIHtcbiAgICAgICAgICAgICAgICByZXoucG9zaXRpb24gPSAnZml4ZWQnO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFjdXJyZW50LmxvY2tlZCkge1xuICAgICAgICAgICAgICAgIHJlei50b3AgKz0gdmlld3BvcnQueTtcbiAgICAgICAgICAgICAgICByZXoubGVmdCArPSB2aWV3cG9ydC54O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXoudG9wID0gZ2V0VmFsdWUoTWF0aC5tYXgocmV6LnRvcCwgcmV6LnRvcCArICgodmlld3BvcnQuaCAtIGhlaWdodCkgKiBjdXJyZW50LnRvcFJhdGlvKSkpO1xuICAgICAgICAgICAgcmV6LmxlZnQgPSBnZXRWYWx1ZShNYXRoLm1heChyZXoubGVmdCwgcmV6LmxlZnQgKyAoKHZpZXdwb3J0LncgLSB3aWR0aCkgKiBjdXJyZW50LmxlZnRSYXRpbykpKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlejtcbiAgICAgICAgfSxcblxuICAgICAgICBfYWZ0ZXJab29tSW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBGLmN1cnJlbnQ7XG5cbiAgICAgICAgICAgIGlmICghY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRi5pc09wZW4gPSBGLmlzT3BlbmVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgRi53cmFwLmNzcygnb3ZlcmZsb3cnLCAndmlzaWJsZScpLmFkZENsYXNzKCdmYW5jeWJveC1vcGVuZWQnKS5oaWRlKCkuc2hvdygwKTtcblxuICAgICAgICAgICAgRi51cGRhdGUoKTtcblxuICAgICAgICAgICAgLy8gQXNzaWduIGEgY2xpY2sgZXZlbnRcbiAgICAgICAgICAgIGlmIChjdXJyZW50LmNsb3NlQ2xpY2sgfHwgKGN1cnJlbnQubmV4dENsaWNrICYmIEYuZ3JvdXAubGVuZ3RoID4gMSkpIHtcbiAgICAgICAgICAgICAgICBGLmlubmVyLmNzcygnY3Vyc29yJywgJ3BvaW50ZXInKS5iaW5kKCdjbGljay5mYicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFqUXVlcnkoZS50YXJnZXQpLmlzKCdhJykgJiYgIWpRdWVyeShlLnRhcmdldCkucGFyZW50KCkuaXMoJ2EnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBGW2N1cnJlbnQuY2xvc2VDbGljayA/ICdjbG9zZScgOiAnbmV4dCddKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgY2xvc2UgYnV0dG9uXG4gICAgICAgICAgICBpZiAoY3VycmVudC5jbG9zZUJ0bikge1xuICAgICAgICAgICAgICAgIGpRdWVyeShjdXJyZW50LnRwbC5jbG9zZUJ0bikuYXBwZW5kVG8oRi5za2luKS5iaW5kKCdjbGljay5mYicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIEYuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ3JlYXRlIG5hdmlnYXRpb24gYXJyb3dzXG4gICAgICAgICAgICBpZiAoY3VycmVudC5hcnJvd3MgJiYgRi5ncm91cC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQubG9vcCB8fCBjdXJyZW50LmluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBqUXVlcnkoY3VycmVudC50cGwucHJldikuYXBwZW5kVG8oRi5vdXRlcikuYmluZCgnY2xpY2suZmInLCBGLnByZXYpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Lmxvb3AgfHwgY3VycmVudC5pbmRleCA8IEYuZ3JvdXAubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBqUXVlcnkoY3VycmVudC50cGwubmV4dCkuYXBwZW5kVG8oRi5vdXRlcikuYmluZCgnY2xpY2suZmInLCBGLm5leHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRi50cmlnZ2VyKCdhZnRlclNob3cnKTtcblxuICAgICAgICAgICAgLy8gU3RvcCB0aGUgc2xpZGVzaG93IGlmIHRoaXMgaXMgdGhlIGxhc3QgaXRlbVxuICAgICAgICAgICAgaWYgKCFjdXJyZW50Lmxvb3AgJiYgY3VycmVudC5pbmRleCA9PT0gY3VycmVudC5ncm91cC5sZW5ndGggLSAxKSB7XG5cbiAgICAgICAgICAgICAgICBGLnBsYXkoZmFsc2UpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKEYub3B0cy5hdXRvUGxheSAmJiAhRi5wbGF5ZXIuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBGLm9wdHMuYXV0b1BsYXkgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIEYucGxheSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBfYWZ0ZXJab29tT3V0OiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIG9iaiA9IG9iaiB8fCBGLmN1cnJlbnQ7XG5cbiAgICAgICAgICAgIGpRdWVyeSgnLmZhbmN5Ym94LXdyYXAnKS50cmlnZ2VyKCdvblJlc2V0JykucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgIGpRdWVyeS5leHRlbmQoRiwge1xuICAgICAgICAgICAgICAgIGdyb3VwOiB7fSxcbiAgICAgICAgICAgICAgICBvcHRzOiB7fSxcbiAgICAgICAgICAgICAgICByb3V0ZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGN1cnJlbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgaXNBY3RpdmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlzT3BlbmVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc09wZW46IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlzQ2xvc2luZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgd3JhcDogbnVsbCxcbiAgICAgICAgICAgICAgICBza2luOiBudWxsLFxuICAgICAgICAgICAgICAgIG91dGVyOiBudWxsLFxuICAgICAgICAgICAgICAgIGlubmVyOiBudWxsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgRi50cmlnZ2VyKCdhZnRlckNsb3NlJywgb2JqKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLypcbiAgICAgKlx0RGVmYXVsdCB0cmFuc2l0aW9uc1xuICAgICAqL1xuXG4gICAgRi50cmFuc2l0aW9ucyA9IHtcbiAgICAgICAgZ2V0T3JpZ1Bvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gRi5jdXJyZW50LFxuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBjdXJyZW50LmVsZW1lbnQsXG4gICAgICAgICAgICAgICAgb3JpZyA9IGN1cnJlbnQub3JpZyxcbiAgICAgICAgICAgICAgICBwb3MgPSB7fSxcbiAgICAgICAgICAgICAgICB3aWR0aCA9IDUwLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IDUwLFxuICAgICAgICAgICAgICAgIGhQYWRkaW5nID0gY3VycmVudC5oUGFkZGluZyxcbiAgICAgICAgICAgICAgICB3UGFkZGluZyA9IGN1cnJlbnQud1BhZGRpbmcsXG4gICAgICAgICAgICAgICAgdmlld3BvcnQgPSBGLmdldFZpZXdwb3J0KCk7XG5cbiAgICAgICAgICAgIGlmICghb3JpZyAmJiBjdXJyZW50LmlzRG9tICYmIGVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICAgICAgICBvcmlnID0gZWxlbWVudC5maW5kKCdpbWc6Zmlyc3QnKTtcblxuICAgICAgICAgICAgICAgIGlmICghb3JpZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZyA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNRdWVyeShvcmlnKSkge1xuICAgICAgICAgICAgICAgIHBvcyA9IG9yaWcub2Zmc2V0KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3JpZy5pcygnaW1nJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBvcmlnLm91dGVyV2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gb3JpZy5vdXRlckhlaWdodCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3MudG9wID0gdmlld3BvcnQueSArICh2aWV3cG9ydC5oIC0gaGVpZ2h0KSAqIGN1cnJlbnQudG9wUmF0aW87XG4gICAgICAgICAgICAgICAgcG9zLmxlZnQgPSB2aWV3cG9ydC54ICsgKHZpZXdwb3J0LncgLSB3aWR0aCkgKiBjdXJyZW50LmxlZnRSYXRpbztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKEYud3JhcC5jc3MoJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcgfHwgY3VycmVudC5sb2NrZWQpIHtcbiAgICAgICAgICAgICAgICBwb3MudG9wIC09IHZpZXdwb3J0Lnk7XG4gICAgICAgICAgICAgICAgcG9zLmxlZnQgLT0gdmlld3BvcnQueDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcG9zID0ge1xuICAgICAgICAgICAgICAgIHRvcDogZ2V0VmFsdWUocG9zLnRvcCAtIGhQYWRkaW5nICogY3VycmVudC50b3BSYXRpbyksXG4gICAgICAgICAgICAgICAgbGVmdDogZ2V0VmFsdWUocG9zLmxlZnQgLSB3UGFkZGluZyAqIGN1cnJlbnQubGVmdFJhdGlvKSxcbiAgICAgICAgICAgICAgICB3aWR0aDogZ2V0VmFsdWUod2lkdGggKyB3UGFkZGluZyksXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBnZXRWYWx1ZShoZWlnaHQgKyBoUGFkZGluZylcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RlcDogZnVuY3Rpb24obm93LCBmeCkge1xuICAgICAgICAgICAgdmFyIHJhdGlvLFxuICAgICAgICAgICAgICAgIHBhZGRpbmcsXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgcHJvcCA9IGZ4LnByb3AsXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IEYuY3VycmVudCxcbiAgICAgICAgICAgICAgICB3cmFwU3BhY2UgPSBjdXJyZW50LndyYXBTcGFjZSxcbiAgICAgICAgICAgICAgICBza2luU3BhY2UgPSBjdXJyZW50LnNraW5TcGFjZTtcblxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICd3aWR0aCcgfHwgcHJvcCA9PT0gJ2hlaWdodCcpIHtcbiAgICAgICAgICAgICAgICByYXRpbyA9IGZ4LmVuZCA9PT0gZnguc3RhcnQgPyAxIDogKG5vdyAtIGZ4LnN0YXJ0KSAvIChmeC5lbmQgLSBmeC5zdGFydCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoRi5pc0Nsb3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcGFkZGluZyA9IHByb3AgPT09ICd3aWR0aCcgPyBjdXJyZW50LndQYWRkaW5nIDogY3VycmVudC5oUGFkZGluZztcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG5vdyAtIHBhZGRpbmc7XG5cbiAgICAgICAgICAgICAgICBGLnNraW5bcHJvcF0oZ2V0U2NhbGFyKHByb3AgPT09ICd3aWR0aCcgPyB2YWx1ZSA6IHZhbHVlIC0gKHdyYXBTcGFjZSAqIHJhdGlvKSkpO1xuICAgICAgICAgICAgICAgIEYuaW5uZXJbcHJvcF0oZ2V0U2NhbGFyKHByb3AgPT09ICd3aWR0aCcgPyB2YWx1ZSA6IHZhbHVlIC0gKHdyYXBTcGFjZSAqIHJhdGlvKSAtIChza2luU3BhY2UgKiByYXRpbykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB6b29tSW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBGLmN1cnJlbnQsXG4gICAgICAgICAgICAgICAgc3RhcnRQb3MgPSBjdXJyZW50LnBvcyxcbiAgICAgICAgICAgICAgICBlZmZlY3QgPSBjdXJyZW50Lm9wZW5FZmZlY3QsXG4gICAgICAgICAgICAgICAgZWxhc3RpYyA9IGVmZmVjdCA9PT0gJ2VsYXN0aWMnLFxuICAgICAgICAgICAgICAgIGVuZFBvcyA9IGpRdWVyeS5leHRlbmQoe1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICAgICAgfSwgc3RhcnRQb3MpO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgXCJwb3NpdGlvblwiIHByb3BlcnR5IHRoYXQgYnJlYWtzIG9sZGVyIElFXG4gICAgICAgICAgICBkZWxldGUgZW5kUG9zLnBvc2l0aW9uO1xuXG4gICAgICAgICAgICBpZiAoZWxhc3RpYykge1xuICAgICAgICAgICAgICAgIHN0YXJ0UG9zID0gdGhpcy5nZXRPcmlnUG9zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Lm9wZW5PcGFjaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9zLm9wYWNpdHkgPSAwLjE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVmZmVjdCA9PT0gJ2ZhZGUnKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRQb3Mub3BhY2l0eSA9IDAuMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRi53cmFwLmNzcyhzdGFydFBvcykuYW5pbWF0ZShlbmRQb3MsIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogZWZmZWN0ID09PSAnbm9uZScgPyAwIDogY3VycmVudC5vcGVuU3BlZWQsXG4gICAgICAgICAgICAgICAgZWFzaW5nOiBjdXJyZW50Lm9wZW5FYXNpbmcsXG4gICAgICAgICAgICAgICAgc3RlcDogZWxhc3RpYyA/IHRoaXMuc3RlcCA6IG51bGwsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IEYuX2FmdGVyWm9vbUluXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICB6b29tT3V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gRi5jdXJyZW50LFxuICAgICAgICAgICAgICAgIGVmZmVjdCA9IGN1cnJlbnQuY2xvc2VFZmZlY3QsXG4gICAgICAgICAgICAgICAgZWxhc3RpYyA9IGVmZmVjdCA9PT0gJ2VsYXN0aWMnLFxuICAgICAgICAgICAgICAgIGVuZFBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC4xXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGVsYXN0aWMpIHtcbiAgICAgICAgICAgICAgICBlbmRQb3MgPSB0aGlzLmdldE9yaWdQb3NpdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQuY2xvc2VPcGFjaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZFBvcy5vcGFjaXR5ID0gMC4xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRi53cmFwLmFuaW1hdGUoZW5kUG9zLCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGVmZmVjdCA9PT0gJ25vbmUnID8gMCA6IGN1cnJlbnQuY2xvc2VTcGVlZCxcbiAgICAgICAgICAgICAgICBlYXNpbmc6IGN1cnJlbnQuY2xvc2VFYXNpbmcsXG4gICAgICAgICAgICAgICAgc3RlcDogZWxhc3RpYyA/IHRoaXMuc3RlcCA6IG51bGwsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IEYuX2FmdGVyWm9vbU91dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hhbmdlSW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBGLmN1cnJlbnQsXG4gICAgICAgICAgICAgICAgZWZmZWN0ID0gY3VycmVudC5uZXh0RWZmZWN0LFxuICAgICAgICAgICAgICAgIHN0YXJ0UG9zID0gY3VycmVudC5wb3MsXG4gICAgICAgICAgICAgICAgZW5kUG9zID0ge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBGLmRpcmVjdGlvbixcbiAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IDIwMCxcbiAgICAgICAgICAgICAgICBmaWVsZDtcblxuICAgICAgICAgICAgc3RhcnRQb3Mub3BhY2l0eSA9IDAuMTtcblxuICAgICAgICAgICAgaWYgKGVmZmVjdCA9PT0gJ2VsYXN0aWMnKSB7XG4gICAgICAgICAgICAgICAgZmllbGQgPSBkaXJlY3Rpb24gPT09ICdkb3duJyB8fCBkaXJlY3Rpb24gPT09ICd1cCcgPyAndG9wJyA6ICdsZWZ0JztcblxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdkb3duJyB8fCBkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NbZmllbGRdID0gZ2V0VmFsdWUoZ2V0U2NhbGFyKHN0YXJ0UG9zW2ZpZWxkXSkgLSBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIGVuZFBvc1tmaWVsZF0gPSAnKz0nICsgZGlzdGFuY2UgKyAncHgnO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NbZmllbGRdID0gZ2V0VmFsdWUoZ2V0U2NhbGFyKHN0YXJ0UG9zW2ZpZWxkXSkgKyBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIGVuZFBvc1tmaWVsZF0gPSAnLT0nICsgZGlzdGFuY2UgKyAncHgnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIyNzNcbiAgICAgICAgICAgIGlmIChlZmZlY3QgPT09ICdub25lJykge1xuICAgICAgICAgICAgICAgIEYuX2FmdGVyWm9vbUluKCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgRi53cmFwLmNzcyhzdGFydFBvcykuYW5pbWF0ZShlbmRQb3MsIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IGN1cnJlbnQubmV4dFNwZWVkLFxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IGN1cnJlbnQubmV4dEVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IEYuX2FmdGVyWm9vbUluXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hhbmdlT3V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBwcmV2aW91cyA9IEYucHJldmlvdXMsXG4gICAgICAgICAgICAgICAgZWZmZWN0ID0gcHJldmlvdXMucHJldkVmZmVjdCxcbiAgICAgICAgICAgICAgICBlbmRQb3MgPSB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gRi5kaXJlY3Rpb24sXG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgPSAyMDA7XG5cbiAgICAgICAgICAgIGlmIChlZmZlY3QgPT09ICdlbGFzdGljJykge1xuICAgICAgICAgICAgICAgIGVuZFBvc1tkaXJlY3Rpb24gPT09ICdkb3duJyB8fCBkaXJlY3Rpb24gPT09ICd1cCcgPyAndG9wJyA6ICdsZWZ0J10gPSAoZGlyZWN0aW9uID09PSAndXAnIHx8IGRpcmVjdGlvbiA9PT0gJ2xlZnQnID8gJy0nIDogJysnKSArICc9JyArIGRpc3RhbmNlICsgJ3B4JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJldmlvdXMud3JhcC5hbmltYXRlKGVuZFBvcywge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBlZmZlY3QgPT09ICdub25lJyA/IDAgOiBwcmV2aW91cy5wcmV2U3BlZWQsXG4gICAgICAgICAgICAgICAgZWFzaW5nOiBwcmV2aW91cy5wcmV2RWFzaW5nLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KHRoaXMpLnRyaWdnZXIoJ29uUmVzZXQnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKlxuICAgICAqXHRPdmVybGF5IGhlbHBlclxuICAgICAqL1xuXG4gICAgRi5oZWxwZXJzLm92ZXJsYXkgPSB7XG4gICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICBjbG9zZUNsaWNrOiB0cnVlLCAvLyBpZiB0cnVlLCBmYW5jeUJveCB3aWxsIGJlIGNsb3NlZCB3aGVuIHVzZXIgY2xpY2tzIG9uIHRoZSBvdmVybGF5XG4gICAgICAgICAgICBzcGVlZE91dDogMjAwLCAvLyBkdXJhdGlvbiBvZiBmYWRlT3V0IGFuaW1hdGlvblxuICAgICAgICAgICAgc2hvd0Vhcmx5OiB0cnVlLCAvLyBpbmRpY2F0ZXMgaWYgc2hvdWxkIGJlIG9wZW5lZCBpbW1lZGlhdGVseSBvciB3YWl0IHVudGlsIHRoZSBjb250ZW50IGlzIHJlYWR5XG4gICAgICAgICAgICBjc3M6IHt9LCAvLyBjdXN0b20gQ1NTIHByb3BlcnRpZXNcbiAgICAgICAgICAgIGxvY2tlZDogIWlzVG91Y2gsIC8vIGlmIHRydWUsIHRoZSBjb250ZW50IHdpbGwgYmUgbG9ja2VkIGludG8gb3ZlcmxheVxuICAgICAgICAgICAgZml4ZWQ6IHRydWUgLy8gaWYgZmFsc2UsIHRoZSBvdmVybGF5IENTUyBwb3NpdGlvbiBwcm9wZXJ0eSB3aWxsIG5vdCBiZSBzZXQgdG8gXCJmaXhlZFwiXG4gICAgICAgIH0sXG5cbiAgICAgICAgb3ZlcmxheTogbnVsbCwgLy8gY3VycmVudCBoYW5kbGVcbiAgICAgICAgZml4ZWQ6IGZhbHNlLCAvLyBpbmRpY2F0ZXMgaWYgdGhlIG92ZXJsYXkgaGFzIHBvc2l0aW9uIFwiZml4ZWRcIlxuICAgICAgICBlbDogalF1ZXJ5KCdodG1sJyksIC8vIGVsZW1lbnQgdGhhdCBjb250YWlucyBcInRoZSBsb2NrXCJcblxuICAgICAgICAvLyBQdWJsaWMgbWV0aG9kc1xuICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnQ7XG5cbiAgICAgICAgICAgIG9wdHMgPSBqUXVlcnkuZXh0ZW5kKHt9LCB0aGlzLmRlZmF1bHRzLCBvcHRzKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMub3ZlcmxheSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFyZW50ID0gRi5jb21pbmcgPyBGLmNvbWluZy5wYXJlbnQgOiBvcHRzLnBhcmVudDtcblxuICAgICAgICAgICAgdGhpcy5vdmVybGF5ID0galF1ZXJ5KCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtb3ZlcmxheVwiPjwvZGl2PicpLmFwcGVuZFRvKHBhcmVudCAmJiBwYXJlbnQubGVuZ3RoID8gcGFyZW50IDogJ2JvZHknKTtcbiAgICAgICAgICAgIHRoaXMuZml4ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKG9wdHMuZml4ZWQgJiYgRi5kZWZhdWx0cy5maXhlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxheS5hZGRDbGFzcygnZmFuY3lib3gtb3ZlcmxheS1maXhlZCcpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5maXhlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgb3BlbjogZnVuY3Rpb24ob3B0cykge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgICAgICBvcHRzID0galF1ZXJ5LmV4dGVuZCh7fSwgdGhpcy5kZWZhdWx0cywgb3B0cyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm92ZXJsYXkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm92ZXJsYXkudW5iaW5kKCcub3ZlcmxheScpLndpZHRoKCdhdXRvJykuaGVpZ2h0KCdhdXRvJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGUob3B0cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5maXhlZCkge1xuICAgICAgICAgICAgICAgIFcuYmluZCgncmVzaXplLm92ZXJsYXknLCBqUXVlcnkucHJveHkodGhpcy51cGRhdGUsIHRoaXMpKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRzLmNsb3NlQ2xpY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLm92ZXJsYXkuYmluZCgnY2xpY2sub3ZlcmxheScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpRdWVyeShlLnRhcmdldCkuaGFzQ2xhc3MoJ2ZhbmN5Ym94LW92ZXJsYXknKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEYuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMub3ZlcmxheS5jc3Mob3B0cy5jc3MpLnNob3coKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBXLnVuYmluZCgncmVzaXplLm92ZXJsYXknKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZWwuaGFzQ2xhc3MoJ2ZhbmN5Ym94LWxvY2snKSkge1xuICAgICAgICAgICAgICAgIGpRdWVyeSgnLmZhbmN5Ym94LW1hcmdpbicpLnJlbW92ZUNsYXNzKCdmYW5jeWJveC1tYXJnaW4nKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZWwucmVtb3ZlQ2xhc3MoJ2ZhbmN5Ym94LWxvY2snKTtcblxuICAgICAgICAgICAgICAgIFcuc2Nyb2xsVG9wKHRoaXMuc2Nyb2xsVikuc2Nyb2xsTGVmdCh0aGlzLnNjcm9sbEgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBqUXVlcnkoJy5mYW5jeWJveC1vdmVybGF5JykucmVtb3ZlKCkuaGlkZSgpO1xuXG4gICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBvdmVybGF5OiBudWxsLFxuICAgICAgICAgICAgICAgIGZpeGVkOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gUHJpdmF0ZSwgY2FsbGJhY2tzXG5cbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9ICcxMDAlJywgb2Zmc2V0V2lkdGg7XG5cbiAgICAgICAgICAgIC8vIFJlc2V0IHdpZHRoL2hlaWdodCBzbyBpdCB3aWxsIG5vdCBtZXNzXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXkud2lkdGgod2lkdGgpLmhlaWdodCgnMTAwJScpO1xuXG4gICAgICAgICAgICAvLyBqUXVlcnkgZG9lcyBub3QgcmV0dXJuIHJlbGlhYmxlIHJlc3VsdCBmb3IgSUVcbiAgICAgICAgICAgIGlmIChJRSkge1xuICAgICAgICAgICAgICAgIG9mZnNldFdpZHRoID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldFdpZHRoLCBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoKTtcblxuICAgICAgICAgICAgICAgIGlmIChELndpZHRoKCkgPiBvZmZzZXRXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IEQud2lkdGgoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoRC53aWR0aCgpID4gVy53aWR0aCgpKSB7XG4gICAgICAgICAgICAgICAgd2lkdGggPSBELndpZHRoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMub3ZlcmxheS53aWR0aCh3aWR0aCkuaGVpZ2h0KEQuaGVpZ2h0KCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIFRoaXMgaXMgd2hlcmUgd2UgY2FuIG1hbmlwdWxhdGUgRE9NLCBiZWNhdXNlIGxhdGVyIGl0IHdvdWxkIGNhdXNlIGlmcmFtZXMgdG8gcmVsb2FkXG4gICAgICAgIG9uUmVhZHk6IGZ1bmN0aW9uKG9wdHMsIG9iaikge1xuICAgICAgICAgICAgdmFyIG92ZXJsYXkgPSB0aGlzLm92ZXJsYXk7XG5cbiAgICAgICAgICAgIGpRdWVyeSgnLmZhbmN5Ym94LW92ZXJsYXknKS5zdG9wKHRydWUsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAoIW92ZXJsYXkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZShvcHRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9wdHMubG9ja2VkICYmIHRoaXMuZml4ZWQgJiYgb2JqLmZpeGVkKSB7XG4gICAgICAgICAgICAgICAgb2JqLmxvY2tlZCA9IHRoaXMub3ZlcmxheS5hcHBlbmQob2JqLndyYXApO1xuICAgICAgICAgICAgICAgIG9iai5maXhlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0cy5zaG93RWFybHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJlZm9yZVNob3cuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBiZWZvcmVTaG93OiBmdW5jdGlvbihvcHRzLCBvYmopIHtcbiAgICAgICAgICAgIGlmIChvYmoubG9ja2VkICYmICF0aGlzLmVsLmhhc0NsYXNzKCdmYW5jeWJveC1sb2NrJykpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maXhQb3NpdGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KCcqJykuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChqUXVlcnkodGhpcykuY3NzKCdwb3NpdGlvbicpID09PSAnZml4ZWQnICYmICFqUXVlcnkodGhpcykuaGFzQ2xhc3MoXCJmYW5jeWJveC1vdmVybGF5XCIpICYmICFqUXVlcnkodGhpcykuaGFzQ2xhc3MoXCJmYW5jeWJveC13cmFwXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfSkuYWRkQ2xhc3MoJ2ZhbmN5Ym94LW1hcmdpbicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZWwuYWRkQ2xhc3MoJ2ZhbmN5Ym94LW1hcmdpbicpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxWID0gVy5zY3JvbGxUb3AoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbEggPSBXLnNjcm9sbExlZnQoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZWwuYWRkQ2xhc3MoJ2ZhbmN5Ym94LWxvY2snKTtcblxuICAgICAgICAgICAgICAgIFcuc2Nyb2xsVG9wKHRoaXMuc2Nyb2xsVikuc2Nyb2xsTGVmdCh0aGlzLnNjcm9sbEgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm9wZW4ob3B0cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmZpeGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhZnRlckNsb3NlOiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgb3ZlcmxheSBpZiBleGlzdHMgYW5kIGZhbmN5Qm94IGlzIG5vdCBvcGVuaW5nXG4gICAgICAgICAgICAvLyAoZS5nLiwgaXQgaXMgbm90IGJlaW5nIG9wZW4gdXNpbmcgYWZ0ZXJDbG9zZSBjYWxsYmFjaylcbiAgICAgICAgICAgIGlmICh0aGlzLm92ZXJsYXkgJiYgIUYuY29taW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vdmVybGF5LmZhZGVPdXQob3B0cy5zcGVlZE91dCwgalF1ZXJ5LnByb3h5KHRoaXMuY2xvc2UsIHRoaXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKlxuICAgICAqXHRUaXRsZSBoZWxwZXJcbiAgICAgKi9cblxuICAgIEYuaGVscGVycy50aXRsZSA9IHtcbiAgICAgICAgZGVmYXVsdHM6IHtcbiAgICAgICAgICAgIHR5cGU6ICdmbG9hdCcsIC8vICdmbG9hdCcsICdpbnNpZGUnLCAnb3V0c2lkZScgb3IgJ292ZXInLFxuICAgICAgICAgICAgcG9zaXRpb246ICdib3R0b20nIC8vICd0b3AnIG9yICdib3R0b20nXG4gICAgICAgIH0sXG5cbiAgICAgICAgYmVmb3JlU2hvdzogZnVuY3Rpb24ob3B0cykge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBGLmN1cnJlbnQsXG4gICAgICAgICAgICAgICAgdGV4dCA9IGN1cnJlbnQudGl0bGUsXG4gICAgICAgICAgICAgICAgdHlwZSA9IG9wdHMudHlwZSxcbiAgICAgICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ7XG5cbiAgICAgICAgICAgIGlmIChqUXVlcnkuaXNGdW5jdGlvbih0ZXh0KSkge1xuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LmNhbGwoY3VycmVudC5lbGVtZW50LCBjdXJyZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFpc1N0cmluZyh0ZXh0KSB8fCBqUXVlcnkudHJpbSh0ZXh0KSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRpdGxlID0galF1ZXJ5KCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtdGl0bGUgZmFuY3lib3gtdGl0bGUtJyArIHR5cGUgKyAnLXdyYXBcIj4nICsgdGV4dCArICc8L2Rpdj4nKTtcblxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnaW5zaWRlJzpcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gRi5za2luO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ291dHNpZGUnOlxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBGLndyYXA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnb3Zlcic6XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IEYuaW5uZXI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogLy8gJ2Zsb2F0J1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBGLnNraW47XG5cbiAgICAgICAgICAgICAgICAgICAgdGl0bGUuYXBwZW5kVG8oJ2JvZHknKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoSUUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlLndpZHRoKHRpdGxlLndpZHRoKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGl0bGUud3JhcElubmVyKCc8c3BhbiBjbGFzcz1cImNoaWxkXCI+PC9zcGFuPicpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vSW5jcmVhc2UgYm90dG9tIG1hcmdpbiBzbyB0aGlzIHRpdGxlIHdpbGwgYWxzbyBmaXQgaW50byB2aWV3cG9ydFxuICAgICAgICAgICAgICAgICAgICBGLmN1cnJlbnQubWFyZ2luWzJdICs9IE1hdGguYWJzKGdldFNjYWxhcih0aXRsZS5jc3MoJ21hcmdpbi1ib3R0b20nKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGl0bGVbKG9wdHMucG9zaXRpb24gPT09ICd0b3AnID8gJ3ByZXBlbmRUbycgOiAnYXBwZW5kVG8nKV0odGFyZ2V0KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBqUXVlcnkgcGx1Z2luIGluaXRpYWxpemF0aW9uXG4gICAgalF1ZXJ5LmZuLmZhbmN5Ym94ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgaW5kZXgsXG4gICAgICAgICAgICB0aGF0ID0galF1ZXJ5KHRoaXMpLFxuICAgICAgICAgICAgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yIHx8ICcnLFxuICAgICAgICAgICAgcnVuID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciB3aGF0ID0galF1ZXJ5KHRoaXMpLmJsdXIoKSwgaWR4ID0gaW5kZXgsIHJlbFR5cGUsIHJlbFZhbDtcblxuICAgICAgICAgICAgICAgIGlmICghKGUuY3RybEtleSB8fCBlLmFsdEtleSB8fCBlLnNoaWZ0S2V5IHx8IGUubWV0YUtleSkgJiYgIXdoYXQuaXMoJy5mYW5jeWJveC13cmFwJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVsVHlwZSA9IG9wdGlvbnMuZ3JvdXBBdHRyIHx8ICdkYXRhLWZhbmN5Ym94LWdyb3VwJztcbiAgICAgICAgICAgICAgICAgICAgcmVsVmFsID0gd2hhdC5hdHRyKHJlbFR5cGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVsVmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWxUeXBlID0gJ3JlbCc7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWxWYWwgPSB3aGF0LmdldCgwKVtyZWxUeXBlXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWxWYWwgJiYgcmVsVmFsICE9PSAnJyAmJiByZWxWYWwgIT09ICdub2ZvbGxvdycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQgPSBzZWxlY3Rvci5sZW5ndGggPyBqUXVlcnkoc2VsZWN0b3IpIDogdGhhdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQgPSB3aGF0LmZpbHRlcignWycgKyByZWxUeXBlICsgJz1cIicgKyByZWxWYWwgKyAnXCJdJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHggPSB3aGF0LmluZGV4KHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5pbmRleCA9IGlkeDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTdG9wIGFuIGV2ZW50IGZyb20gYnViYmxpbmcgaWYgZXZlcnl0aGluZyBpcyBmaW5lXG4gICAgICAgICAgICAgICAgICAgIGlmIChGLm9wZW4od2hhdCwgb3B0aW9ucykgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBpbmRleCA9IG9wdGlvbnMuaW5kZXggfHwgMDtcblxuICAgICAgICBpZiAoIXNlbGVjdG9yIHx8IG9wdGlvbnMubGl2ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoYXQudW5iaW5kKCdjbGljay5mYi1zdGFydCcpLmJpbmQoJ2NsaWNrLmZiLXN0YXJ0JywgcnVuKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgRC51bmRlbGVnYXRlKHNlbGVjdG9yLCAnY2xpY2suZmItc3RhcnQnKS5kZWxlZ2F0ZShzZWxlY3RvciArIFwiOm5vdCgnLmZhbmN5Ym94LWl0ZW0sIC5mYW5jeWJveC1uYXYnKVwiLCAnY2xpY2suZmItc3RhcnQnLCBydW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maWx0ZXIoJ1tkYXRhLWZhbmN5Ym94LXN0YXJ0PTFdJykudHJpZ2dlcignY2xpY2snKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLy8gVGVzdHMgdGhhdCBuZWVkIGEgYm9keSBhdCBkb2MgcmVhZHlcbiAgICBELnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdzEsIHcyO1xuXG4gICAgICAgIGlmIChqUXVlcnkuc2Nyb2xsYmFyV2lkdGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gaHR0cDovL2JlbmFsbWFuLmNvbS9wcm9qZWN0cy9qcXVlcnktbWlzYy1wbHVnaW5zLyNzY3JvbGxiYXJ3aWR0aFxuICAgICAgICAgICAgalF1ZXJ5LnNjcm9sbGJhcldpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IGpRdWVyeSgnPGRpdiBzdHlsZT1cIndpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7b3ZlcmZsb3c6YXV0b1wiPjxkaXYvPjwvZGl2PicpLmFwcGVuZFRvKCdib2R5JyksXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkID0gcGFyZW50LmNoaWxkcmVuKCksXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gY2hpbGQuaW5uZXJXaWR0aCgpIC0gY2hpbGQuaGVpZ2h0KDk5KS5pbm5lcldpZHRoKCk7XG5cbiAgICAgICAgICAgICAgICBwYXJlbnQucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gd2lkdGg7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGpRdWVyeS5zdXBwb3J0LmZpeGVkUG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgalF1ZXJ5LnN1cHBvcnQuZml4ZWRQb3NpdGlvbiA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IGpRdWVyeSgnPGRpdiBzdHlsZT1cInBvc2l0aW9uOmZpeGVkO3RvcDoyMHB4O1wiPjwvZGl2PicpLmFwcGVuZFRvKCdib2R5JyksXG4gICAgICAgICAgICAgICAgICAgIGZpeGVkID0gKGVsZW1bMF0ub2Zmc2V0VG9wID09PSAyMCB8fCBlbGVtWzBdLm9mZnNldFRvcCA9PT0gMTUpO1xuXG4gICAgICAgICAgICAgICAgZWxlbS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmaXhlZDtcbiAgICAgICAgICAgIH0oKSk7XG4gICAgICAgIH1cblxuICAgICAgICBqUXVlcnkuZXh0ZW5kKEYuZGVmYXVsdHMsIHtcbiAgICAgICAgICAgIHNjcm9sbGJhcldpZHRoOiBqUXVlcnkuc2Nyb2xsYmFyV2lkdGgoKSxcbiAgICAgICAgICAgIGZpeGVkOiBqUXVlcnkuc3VwcG9ydC5maXhlZFBvc2l0aW9uLFxuICAgICAgICAgICAgcGFyZW50OiBqUXVlcnkoJ2JvZHknKVxuICAgICAgICB9KTtcblxuICAgICAgICAvL0dldCByZWFsIHdpZHRoIG9mIHBhZ2Ugc2Nyb2xsLWJhclxuICAgICAgICB3MSA9IGpRdWVyeSh3aW5kb3cpLndpZHRoKCk7XG5cbiAgICAgICAgSC5hZGRDbGFzcygnZmFuY3lib3gtbG9jay10ZXN0Jyk7XG5cbiAgICAgICAgdzIgPSBqUXVlcnkod2luZG93KS53aWR0aCgpO1xuXG4gICAgICAgIEgucmVtb3ZlQ2xhc3MoJ2ZhbmN5Ym94LWxvY2stdGVzdCcpO1xuXG4gICAgICAgIGpRdWVyeShcIjxzdHlsZSB0eXBlPSd0ZXh0L2Nzcyc+LmZhbmN5Ym94LW1hcmdpbnttYXJnaW4tcmlnaHQ6XCIgKyAodzIgLSB3MSkgKyBcInB4O308L3N0eWxlPlwiKS5hcHBlbmRUbyhcImhlYWRcIik7XG4gICAgfSk7XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpRdWVyeSIsIkgiLCJXIiwid2luZG93IiwiRCIsImRvY3VtZW50IiwiRiIsImZhbmN5Ym94Iiwib3BlbiIsImFwcGx5IiwidGhpcyIsImFyZ3VtZW50cyIsIklFIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibWF0Y2giLCJkaWRVcGRhdGUiLCJpc1RvdWNoIiwidW5kZWZpbmVkIiwiY3JlYXRlVG91Y2giLCJpc1F1ZXJ5Iiwib2JqIiwiaGFzT3duUHJvcGVydHkiLCJpc1N0cmluZyIsInN0ciIsInR5cGUiLCJpc1BlcmNlbnRhZ2UiLCJpbmRleE9mIiwiZ2V0U2NhbGFyIiwib3JpZyIsImRpbSIsInZhbHVlIiwicGFyc2VJbnQiLCJnZXRWaWV3cG9ydCIsIk1hdGgiLCJjZWlsIiwiZ2V0VmFsdWUiLCJleHRlbmQiLCJ2ZXJzaW9uIiwiZGVmYXVsdHMiLCJwYWRkaW5nIiwibWFyZ2luIiwid2lkdGgiLCJoZWlnaHQiLCJtaW5XaWR0aCIsIm1pbkhlaWdodCIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwicGl4ZWxSYXRpbyIsImF1dG9TaXplIiwiYXV0b0hlaWdodCIsImF1dG9XaWR0aCIsImF1dG9SZXNpemUiLCJhdXRvQ2VudGVyIiwiZml0VG9WaWV3IiwiYXNwZWN0UmF0aW8iLCJ0b3BSYXRpbyIsImxlZnRSYXRpbyIsInNjcm9sbGluZyIsIndyYXBDU1MiLCJhcnJvd3MiLCJjbG9zZUJ0biIsImNsb3NlQ2xpY2siLCJuZXh0Q2xpY2siLCJtb3VzZVdoZWVsIiwiYXV0b1BsYXkiLCJwbGF5U3BlZWQiLCJwcmVsb2FkIiwibW9kYWwiLCJsb29wIiwiYWpheCIsImRhdGFUeXBlIiwiaGVhZGVycyIsImlmcmFtZSIsInN3ZiIsIndtb2RlIiwiYWxsb3dmdWxsc2NyZWVuIiwiYWxsb3dzY3JpcHRhY2Nlc3MiLCJrZXlzIiwibmV4dCIsInByZXYiLCJjbG9zZSIsInBsYXkiLCJ0b2dnbGUiLCJkaXJlY3Rpb24iLCJzY3JvbGxPdXRzaWRlIiwiaW5kZXgiLCJocmVmIiwiY29udGVudCIsInRpdGxlIiwidHBsIiwid3JhcCIsImltYWdlIiwiZXJyb3IiLCJsb2FkaW5nIiwib3BlbkVmZmVjdCIsIm9wZW5TcGVlZCIsIm9wZW5FYXNpbmciLCJvcGVuT3BhY2l0eSIsIm9wZW5NZXRob2QiLCJjbG9zZUVmZmVjdCIsImNsb3NlU3BlZWQiLCJjbG9zZUVhc2luZyIsImNsb3NlT3BhY2l0eSIsImNsb3NlTWV0aG9kIiwibmV4dEVmZmVjdCIsIm5leHRTcGVlZCIsIm5leHRFYXNpbmciLCJuZXh0TWV0aG9kIiwicHJldkVmZmVjdCIsInByZXZTcGVlZCIsInByZXZFYXNpbmciLCJwcmV2TWV0aG9kIiwiaGVscGVycyIsIm92ZXJsYXkiLCJvbkNhbmNlbCIsIm5vb3AiLCJiZWZvcmVMb2FkIiwiYWZ0ZXJMb2FkIiwiYmVmb3JlU2hvdyIsImFmdGVyU2hvdyIsImJlZm9yZUNoYW5nZSIsImJlZm9yZUNsb3NlIiwiYWZ0ZXJDbG9zZSIsImdyb3VwIiwib3B0cyIsInByZXZpb3VzIiwiY29taW5nIiwiY3VycmVudCIsImlzQWN0aXZlIiwiaXNPcGVuIiwiaXNPcGVuZWQiLCJza2luIiwib3V0ZXIiLCJpbm5lciIsInBsYXllciIsInRpbWVyIiwiYWpheExvYWQiLCJpbWdQcmVsb2FkIiwidHJhbnNpdGlvbnMiLCJpc1BsYWluT2JqZWN0IiwiaXNBcnJheSIsImdldCIsImVhY2giLCJpIiwiZWxlbWVudCIsInJleiIsImhyZWZQYXJ0cyIsInNlbGVjdG9yIiwibm9kZVR5cGUiLCJkYXRhIiwiYXR0ciIsInRleHQiLCJodG1sIiwiaXNEb20iLCJtZXRhZGF0YSIsInByb3AiLCJpc0ltYWdlIiwiaXNTV0YiLCJjaGFyQXQiLCJzcGxpdCIsInNoaWZ0IiwicmVwbGFjZSIsIl9zdGFydCIsImNhbmNlbCIsInRyaWdnZXIiLCJoaWRlTG9hZGluZyIsImFib3J0Iiwib25sb2FkIiwib25lcnJvciIsInN0b3AiLCJyZW1vdmUiLCJfYWZ0ZXJab29tT3V0IiwiZXZlbnQiLCJ1bmJpbmRFdmVudHMiLCJpc0Nsb3NpbmciLCJyZW1vdmVDbGFzcyIsImFjdGlvbiIsImNsZWFyIiwiY2xlYXJUaW1lb3V0Iiwic2V0Iiwic2V0VGltZW91dCIsInVuYmluZCIsImxlbmd0aCIsImJpbmQiLCJqdW1wdG8iLCJyb3V0ZXIiLCJyZXBvc2l0aW9uIiwiZSIsIm9ubHlBYnNvbHV0ZSIsInBvcyIsIl9nZXRQb3NpdGlvbiIsInBvc2l0aW9uIiwiYW5pbWF0ZSIsImNzcyIsInVwZGF0ZSIsIm9yaWdpbmFsRXZlbnQiLCJhbnl3YXkiLCJfc2V0RGltZW5zaW9uIiwiY2FuU2hyaW5rIiwicmVtb3ZlQXR0ciIsImFkZENsYXNzIiwic2hvd0xvYWRpbmciLCJlbCIsInZpZXdwb3J0IiwiY2xpY2siLCJhcHBlbmRUbyIsIndoaWNoIiwia2V5Q29kZSIsInByZXZlbnREZWZhdWx0IiwiZml4ZWQiLCJ0b3AiLCJoIiwieSIsImxlZnQiLCJ3IiwieCIsImxvY2tlZCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImJpbmRFdmVudHMiLCJjb2RlIiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsImN0cmxLZXkiLCJhbHRLZXkiLCJzaGlmdEtleSIsIm1ldGFLZXkiLCJpcyIsInZhbCIsImluQXJyYXkiLCJmbiIsIm1vdXNld2hlZWwiLCJkZWx0YSIsImRlbHRhWCIsImRlbHRhWSIsInBhcmVudCIsImNhblNjcm9sbCIsInN0eWxlIiwib3ZlcmZsb3ciLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsIm8iLCJyZXQiLCJpc0Z1bmN0aW9uIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJoZWxwZXIiLCJ2IiwiX2Vycm9yIiwiX2xvYWRJbWFnZSIsIl9sb2FkQWpheCIsIl9sb2FkSWZyYW1lIiwiX2FmdGVyTG9hZCIsImhhc0Vycm9yIiwiaW1nIiwiSW1hZ2UiLCJzcmMiLCJjb21wbGV0ZSIsInVybCIsImpxWEhSIiwidGV4dFN0YXR1cyIsInN1Y2Nlc3MiLCJEYXRlIiwiZ2V0VGltZSIsImZpbmQiLCJoaWRlIiwiZW5kIiwiZW1wdHkiLCJvbmUiLCJwYXJlbnRzIiwic2hvdyIsIl9wcmVsb2FkSW1hZ2VzIiwiaXRlbSIsImxlbiIsImNudCIsIm1pbiIsImVtYmVkIiwicGxhY2Vob2xkZXIiLCJpbnNlcnRBZnRlciIsImRldGFjaCIsInJlcGxhY2VBbGwiLCJuYW1lIiwiYXBwZW5kIiwibm90IiwiY2FuRXhwYW5kIiwid1BhZGRpbmciLCJoUGFkZGluZyIsIndTcGFjZSIsImhTcGFjZSIsIm9yaWdXaWR0aCIsIm9yaWdIZWlnaHQiLCJvcmlnTWF4V2lkdGgiLCJvcmlnTWF4SGVpZ2h0IiwicmF0aW8iLCJ3aWR0aF8iLCJoZWlnaHRfIiwibWF4V2lkdGhfIiwibWF4SGVpZ2h0XyIsImJvZHkiLCJzdGVwcyIsInNjcm9sbE91dCIsInNjcm9sbGJhcldpZHRoIiwid01hcmdpbiIsImhNYXJnaW4iLCJhZGQiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJjb250ZW50V2luZG93IiwibG9jYXRpb24iLCJjb250ZW50cyIsIm1heCIsIndyYXBTcGFjZSIsInNraW5TcGFjZSIsIl9hZnRlclpvb21JbiIsImdldE9yaWdQb3NpdGlvbiIsIm9mZnNldCIsInN0ZXAiLCJub3ciLCJmeCIsInN0YXJ0Iiwiem9vbUluIiwic3RhcnRQb3MiLCJlZmZlY3QiLCJlbGFzdGljIiwiZW5kUG9zIiwib3BhY2l0eSIsImR1cmF0aW9uIiwiZWFzaW5nIiwiem9vbU91dCIsImNoYW5nZUluIiwiZmllbGQiLCJjaGFuZ2VPdXQiLCJzcGVlZE91dCIsInNob3dFYXJseSIsImNyZWF0ZSIsInRoYXQiLCJwcm94eSIsImhhc0NsYXNzIiwic2Nyb2xsViIsInNjcm9sbEgiLCJvZmZzZXRXaWR0aCIsImRvY3VtZW50RWxlbWVudCIsIm9uUmVhZHkiLCJmaXhQb3NpdGlvbiIsImZpbHRlciIsIm9uVXBkYXRlIiwiZmFkZU91dCIsInRyaW0iLCJ3cmFwSW5uZXIiLCJhYnMiLCJvcHRpb25zIiwicnVuIiwicmVsVHlwZSIsInJlbFZhbCIsIndoYXQiLCJibHVyIiwiaWR4IiwiZ3JvdXBBdHRyIiwibGl2ZSIsInVuZGVsZWdhdGUiLCJkZWxlZ2F0ZSIsInJlYWR5IiwidzEiLCJ3MiIsImVsZW0iLCJjaGlsZCIsImNoaWxkcmVuIiwic3VwcG9ydCIsImZpeGVkUG9zaXRpb24iLCJvZmZzZXRUb3AiXSwic291cmNlUm9vdCI6IiJ9